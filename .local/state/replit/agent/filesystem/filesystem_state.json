{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AgriSmart - Precision Agriculture Platform\n\n## Overview\n\nAgriSmart is a comprehensive precision agriculture platform that enables intelligent pesticide management through AI-powered drone integration. The system helps farmers optimize crop health monitoring, reduce pesticide waste, and increase yields through smart agricultural automation. The application provides real-time field mapping, plant health analysis, and automated pesticide application recommendations based on drone-collected data.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\nThe frontend is built as a React Single Page Application (SPA) with modern tooling:\n\n- **Framework**: React 18 with TypeScript for type safety and developer experience\n- **Styling**: Tailwind CSS with shadcn/ui components for consistent, modern UI design\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for robust form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\nThe UI follows a dashboard-based design with protected routes requiring authentication. The application uses a sidebar navigation pattern with responsive mobile support.\n\n### Backend Architecture\n\nThe backend is a REST API built with Node.js and Express:\n\n- **Runtime**: Node.js with TypeScript and ES modules\n- **Framework**: Express.js for HTTP server and API routing\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **Storage**: PostgreSQL database with Drizzle ORM for type-safe database operations\n- **Session Management**: Session-based authentication with secure JWT tokens\n\nThe API follows RESTful conventions with proper error handling and request validation using Zod schemas.\n\n### Data Storage Solutions\n\n**Database**: PostgreSQL with Drizzle ORM\n- **Users**: Authentication and profile management\n- **Crops**: Crop type definitions, planting schedules, and growth stages\n- **Fields**: Geographic field boundaries and crop assignments\n- **Drone Connections**: Device management and connection status\n- **Plant Health Records**: AI-generated health assessments and infection data\n- **Pesticide Applications**: Treatment recommendations and application tracking\n- **Contact Messages**: Customer support and communication\n\nThe database schema is designed for agricultural workflows with proper foreign key relationships and data integrity constraints.\n\n### Authentication and Authorization\n\n- **JWT Tokens**: Stateless authentication with 7-day expiration\n- **Password Security**: Bcrypt hashing with salt rounds for secure password storage\n- **Route Protection**: Middleware-based authentication checking for protected endpoints\n- **Role-Based Access**: User roles system with farmer as default role\n- **Session Management**: Client-side token storage with automatic refresh handling\n\n### External Service Integrations\n\n**Neon Database**: Serverless PostgreSQL hosting for scalable data storage\n**Mapping Services**: Integration points for field mapping and GPS coordinate handling\n**Drone Communication**: Bluetooth and WiFi protocols for drone connectivity\n**Real-time Data**: WebSocket/MQTT architecture prepared for live drone data streaming\n\nThe system is designed with modularity to easily integrate additional agricultural sensors, weather APIs, and third-party farming management systems.\n\n## External Dependencies\n\n- **@neondatabase/serverless**: PostgreSQL database connection and serverless deployment\n- **drizzle-orm**: Type-safe database ORM with PostgreSQL dialect\n- **@tanstack/react-query**: Server state management and API caching\n- **@radix-ui**: Accessible UI component primitives for forms and interactions\n- **bcrypt**: Password hashing and security\n- **jsonwebtoken**: JWT token generation and verification\n- **react-hook-form**: Form validation and submission handling\n- **zod**: Runtime type validation and schema definition\n- **tailwindcss**: Utility-first CSS framework for styling\n- **wouter**: Lightweight React router for SPA navigation","size_bytes":4192},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertCropSchema, insertFieldSchema, insertDroneConnectionSchema,\n         insertPlantHealthRecordSchema, insertPesticideApplicationSchema, insertContactMessageSchema,\n         loginSchema } from \"@shared/schema\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\n\nconst JWT_SECRET = process.env.SESSION_SECRET;\nif (!JWT_SECRET) {\n  console.error('FATAL: SESSION_SECRET environment variable is required');\n  process.exit(1);\n}\n\n// Middleware to verify JWT token\nfunction authenticateToken(req: any, res: any, next: any) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.sendStatus(401);\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(userData.username) || \n                          await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      const user = await storage.createUser({ ...userData, password: hashedPassword });\n\n      // Generate JWT token\n      const token = jwt.sign({ userId: user.id, username: user.username }, JWT_SECRET, { expiresIn: '7d' });\n\n      res.status(201).json({ \n        user: { id: user.id, username: user.username, email: user.email, fullName: user.fullName, role: user.role },\n        token \n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const credentials = loginSchema.parse(req.body);\n      const user = await storage.getUserByUsername(credentials.username);\n      \n      if (!user || !await bcrypt.compare(credentials.password, user.password)) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign({ userId: user.id, username: user.username }, JWT_SECRET, { expiresIn: '7d' });\n\n      res.json({ \n        user: { id: user.id, username: user.username, email: user.email, fullName: user.fullName, role: user.role },\n        token \n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/auth/me', authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ \n        user: { id: user.id, username: user.username, email: user.email, fullName: user.fullName, role: user.role }\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', authenticateToken, async (req: any, res) => {\n    try {\n      const fields = await storage.getFieldsByUserId(req.user.userId);\n      const healthRecords = await storage.getHealthRecordsByUserId(req.user.userId);\n      const applications = await storage.getPesticideApplicationsByUserId(req.user.userId);\n      \n      const totalFields = fields.length;\n      const totalPlants = healthRecords.length * 100; // Approximate\n      const healthyPlants = Math.floor(totalPlants * 0.87);\n      const averageInfectionRate = healthRecords.length > 0 \n        ? healthRecords.reduce((sum, record) => sum + record.infectionRate, 0) / healthRecords.length\n        : 0;\n      const pesticideSaved = applications.reduce((sum, app) => sum + (app.totalVolume || 0), 0);\n\n      res.json({\n        totalFields,\n        healthyPlants,\n        infectionRate: averageInfectionRate,\n        pesticideSaved: Math.floor(pesticideSaved)\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Crop routes\n  app.get('/api/crops', authenticateToken, async (req: any, res) => {\n    try {\n      const crops = await storage.getCropsByUserId(req.user.userId);\n      res.json(crops);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/crops', authenticateToken, async (req: any, res) => {\n    try {\n      const cropData = insertCropSchema.parse({ ...req.body, userId: req.user.userId });\n      const crop = await storage.createCrop(cropData);\n      res.status(201).json(crop);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/crops/:id', authenticateToken, async (req: any, res) => {\n    try {\n      const crop = await storage.updateCrop(req.params.id, req.body);\n      if (!crop) {\n        return res.status(404).json({ message: \"Crop not found\" });\n      }\n      res.json(crop);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Field routes\n  app.get('/api/fields', authenticateToken, async (req: any, res) => {\n    try {\n      const fields = await storage.getFieldsByUserId(req.user.userId);\n      res.json(fields);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/fields', authenticateToken, async (req: any, res) => {\n    try {\n      const fieldData = insertFieldSchema.parse({ ...req.body, userId: req.user.userId });\n      const field = await storage.createField(fieldData);\n      res.status(201).json(field);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Drone routes\n  app.get('/api/drones', authenticateToken, async (req: any, res) => {\n    try {\n      const drones = await storage.getDronesByUserId(req.user.userId);\n      res.json(drones);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/drones', authenticateToken, async (req: any, res) => {\n    try {\n      const droneData = insertDroneConnectionSchema.parse({ ...req.body, userId: req.user.userId });\n      const drone = await storage.createDroneConnection(droneData);\n      res.status(201).json(drone);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/drones/:id', authenticateToken, async (req: any, res) => {\n    try {\n      const drone = await storage.updateDrone(req.params.id, req.body);\n      if (!drone) {\n        return res.status(404).json({ message: \"Drone not found\" });\n      }\n      res.json(drone);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Health records routes\n  app.get('/api/health-records', authenticateToken, async (req: any, res) => {\n    try {\n      const records = await storage.getHealthRecordsByUserId(req.user.userId);\n      res.json(records);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/health-records', authenticateToken, async (req: any, res) => {\n    try {\n      const dataWithUser = { ...req.body, userId: req.user.userId };\n      const recordData = insertPlantHealthRecordSchema.parse(dataWithUser);\n      const record = await storage.createHealthRecord(recordData);\n      res.status(201).json(record);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Pesticide application routes\n  app.get('/api/pesticide-applications', authenticateToken, async (req: any, res) => {\n    try {\n      const applications = await storage.getPesticideApplicationsByUserId(req.user.userId);\n      res.json(applications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/pesticide-applications', authenticateToken, async (req: any, res) => {\n    try {\n      const dataWithUser = { ...req.body, userId: req.user.userId };\n      const applicationData = insertPesticideApplicationSchema.parse(dataWithUser);\n      const application = await storage.createPesticideApplication(applicationData);\n      res.status(201).json(application);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/pesticide-applications/:id', authenticateToken, async (req: any, res) => {\n    try {\n      const application = await storage.updatePesticideApplication(req.params.id, req.body);\n      if (!application) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n      res.json(application);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Contact routes\n  app.post('/api/contact', async (req, res) => {\n    try {\n      const messageData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(messageData);\n      res.status(201).json({ message: \"Message sent successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9522},"server/storage.ts":{"content":"import { type User, type InsertUser, type Crop, type InsertCrop, type Field, type InsertField, \n         type DroneConnection, type InsertDroneConnection, type PlantHealthRecord, \n         type InsertPlantHealthRecord, type PesticideApplication, type InsertPesticideApplication,\n         type ContactMessage, type InsertContactMessage } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Crop operations\n  getCropsByUserId(userId: string): Promise<Crop[]>;\n  getCrop(id: string): Promise<Crop | undefined>;\n  createCrop(crop: InsertCrop): Promise<Crop>;\n  updateCrop(id: string, crop: Partial<Crop>): Promise<Crop | undefined>;\n  deleteCrop(id: string): Promise<boolean>;\n  \n  // Field operations\n  getFieldsByUserId(userId: string): Promise<Field[]>;\n  getField(id: string): Promise<Field | undefined>;\n  createField(field: InsertField): Promise<Field>;\n  \n  // Drone operations\n  getDronesByUserId(userId: string): Promise<DroneConnection[]>;\n  getDrone(id: string): Promise<DroneConnection | undefined>;\n  createDroneConnection(drone: InsertDroneConnection): Promise<DroneConnection>;\n  updateDrone(id: string, drone: Partial<DroneConnection>): Promise<DroneConnection | undefined>;\n  \n  // Plant health operations\n  getHealthRecordsByFieldId(fieldId: string): Promise<PlantHealthRecord[]>;\n  getHealthRecordsByUserId(userId: string): Promise<PlantHealthRecord[]>;\n  createHealthRecord(record: InsertPlantHealthRecord): Promise<PlantHealthRecord>;\n  \n  // Pesticide operations\n  getPesticideApplicationsByFieldId(fieldId: string): Promise<PesticideApplication[]>;\n  getPesticideApplicationsByUserId(userId: string): Promise<PesticideApplication[]>;\n  createPesticideApplication(application: InsertPesticideApplication): Promise<PesticideApplication>;\n  updatePesticideApplication(id: string, application: Partial<PesticideApplication>): Promise<PesticideApplication | undefined>;\n  \n  // Contact operations\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private crops: Map<string, Crop>;\n  private fields: Map<string, Field>;\n  private drones: Map<string, DroneConnection>;\n  private healthRecords: Map<string, PlantHealthRecord>;\n  private pesticideApplications: Map<string, PesticideApplication>;\n  private contactMessages: Map<string, ContactMessage>;\n\n  constructor() {\n    this.users = new Map();\n    this.crops = new Map();\n    this.fields = new Map();\n    this.drones = new Map();\n    this.healthRecords = new Map();\n    this.pesticideApplications = new Map();\n    this.contactMessages = new Map();\n\n    // Initialize with sample user\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    const sampleUserId = randomUUID();\n    const sampleUser: User = {\n      id: sampleUserId,\n      username: \"farmer1\",\n      email: \"farmer1@example.com\",\n      password: \"$2b$10$ITOAicsj1lEPrdK0ttJG/.MXbRHaNX47eFT6.zeGDxqe4agAKydUa\", // password123\n      fullName: \"Rajesh Kumar\",\n      role: \"farmer\",\n      createdAt: new Date(),\n    };\n    this.users.set(sampleUserId, sampleUser);\n\n    // Sample crop\n    const sampleCropId = randomUUID();\n    const sampleCrop: Crop = {\n      id: sampleCropId,\n      userId: sampleUserId,\n      name: \"Main Rice Field\",\n      type: \"rice\",\n      plantedDate: new Date(\"2024-03-15\"),\n      expectedHarvestDate: new Date(\"2024-08-20\"),\n      growthStage: \"flowering\",\n      area: 2.5,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.crops.set(sampleCropId, sampleCrop);\n\n    // Sample fields\n    const field1Id = randomUUID();\n    const field1: Field = {\n      id: field1Id,\n      userId: sampleUserId,\n      cropId: sampleCropId,\n      name: \"North Field Zone A\",\n      latitude: 28.7041,\n      longitude: 77.1025,\n      area: 1.2,\n      boundaries: JSON.stringify([[28.7041, 77.1025], [28.7051, 77.1035], [28.7061, 77.1025], [28.7051, 77.1015]]),\n      createdAt: new Date(),\n    };\n    this.fields.set(field1Id, field1);\n\n    // Sample drone\n    const droneId = randomUUID();\n    const drone: DroneConnection = {\n      id: droneId,\n      userId: sampleUserId,\n      droneName: \"Drone Alpha-1\",\n      connectionType: \"wifi\",\n      status: \"connected\",\n      batteryLevel: 87,\n      lastSeen: new Date(),\n      createdAt: new Date(),\n    };\n    this.drones.set(droneId, drone);\n\n    // Sample health records\n    const healthRecordId = randomUUID();\n    const healthRecord: PlantHealthRecord = {\n      id: healthRecordId,\n      fieldId: field1Id,\n      droneId: droneId,\n      healthScore: 94,\n      infectionRate: 3.2,\n      infectionType: \"aphid\",\n      severity: \"low\",\n      latitude: 28.7041,\n      longitude: 77.1025,\n      detectionConfidence: 85,\n      recordedAt: new Date(),\n    };\n    this.healthRecords.set(healthRecordId, healthRecord);\n\n    // Sample pesticide application\n    const applicationId = randomUUID();\n    const application: PesticideApplication = {\n      id: applicationId,\n      fieldId: field1Id,\n      healthRecordId: healthRecordId,\n      pesticideType: \"Neem oil spray\",\n      volumePerHectare: 2.5,\n      totalVolume: 3.0,\n      applicationMethod: \"drone\",\n      status: \"recommended\",\n      recommendedBy: \"ai_system\",\n      confidence: 85,\n      scheduledFor: null,\n      appliedAt: null,\n      createdAt: new Date(),\n    };\n    this.pesticideApplications.set(applicationId, application);\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      role: insertUser.role || 'farmer',\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Crop operations\n  async getCropsByUserId(userId: string): Promise<Crop[]> {\n    return Array.from(this.crops.values()).filter(crop => crop.userId === userId);\n  }\n\n  async getCrop(id: string): Promise<Crop | undefined> {\n    return this.crops.get(id);\n  }\n\n  async createCrop(insertCrop: InsertCrop): Promise<Crop> {\n    const id = randomUUID();\n    const crop: Crop = { \n      ...insertCrop, \n      id, \n      growthStage: insertCrop.growthStage || 'seedling',\n      isActive: insertCrop.isActive ?? true,\n      createdAt: new Date()\n    };\n    this.crops.set(id, crop);\n    return crop;\n  }\n\n  async updateCrop(id: string, cropUpdate: Partial<Crop>): Promise<Crop | undefined> {\n    const crop = this.crops.get(id);\n    if (crop) {\n      const updatedCrop = { ...crop, ...cropUpdate };\n      this.crops.set(id, updatedCrop);\n      return updatedCrop;\n    }\n    return undefined;\n  }\n\n  async deleteCrop(id: string): Promise<boolean> {\n    return this.crops.delete(id);\n  }\n\n  // Field operations\n  async getFieldsByUserId(userId: string): Promise<Field[]> {\n    return Array.from(this.fields.values()).filter(field => field.userId === userId);\n  }\n\n  async getField(id: string): Promise<Field | undefined> {\n    return this.fields.get(id);\n  }\n\n  async createField(insertField: InsertField): Promise<Field> {\n    const id = randomUUID();\n    const field: Field = { \n      ...insertField, \n      id, \n      cropId: insertField.cropId || null,\n      boundaries: insertField.boundaries || null,\n      createdAt: new Date()\n    };\n    this.fields.set(id, field);\n    return field;\n  }\n\n  // Drone operations\n  async getDronesByUserId(userId: string): Promise<DroneConnection[]> {\n    return Array.from(this.drones.values()).filter(drone => drone.userId === userId);\n  }\n\n  async getDrone(id: string): Promise<DroneConnection | undefined> {\n    return this.drones.get(id);\n  }\n\n  async createDroneConnection(insertDrone: InsertDroneConnection): Promise<DroneConnection> {\n    const id = randomUUID();\n    const drone: DroneConnection = { \n      ...insertDrone, \n      id, \n      status: insertDrone.status || 'connected',\n      batteryLevel: insertDrone.batteryLevel || 100,\n      lastSeen: new Date(),\n      createdAt: new Date()\n    };\n    this.drones.set(id, drone);\n    return drone;\n  }\n\n  async updateDrone(id: string, droneUpdate: Partial<DroneConnection>): Promise<DroneConnection | undefined> {\n    const drone = this.drones.get(id);\n    if (drone) {\n      const updatedDrone = { ...drone, ...droneUpdate, lastSeen: new Date() };\n      this.drones.set(id, updatedDrone);\n      return updatedDrone;\n    }\n    return undefined;\n  }\n\n  // Plant health operations\n  async getHealthRecordsByFieldId(fieldId: string): Promise<PlantHealthRecord[]> {\n    return Array.from(this.healthRecords.values()).filter(record => record.fieldId === fieldId);\n  }\n\n  async getHealthRecordsByUserId(userId: string): Promise<PlantHealthRecord[]> {\n    const userFields = await this.getFieldsByUserId(userId);\n    const fieldIds = userFields.map(field => field.id);\n    return Array.from(this.healthRecords.values()).filter(record => fieldIds.includes(record.fieldId));\n  }\n\n  async createHealthRecord(insertRecord: InsertPlantHealthRecord): Promise<PlantHealthRecord> {\n    const id = randomUUID();\n    const record: PlantHealthRecord = { \n      ...insertRecord, \n      id, \n      latitude: insertRecord.latitude || null,\n      longitude: insertRecord.longitude || null,\n      droneId: insertRecord.droneId || null,\n      infectionType: insertRecord.infectionType || null,\n      recordedAt: new Date()\n    };\n    this.healthRecords.set(id, record);\n    return record;\n  }\n\n  // Pesticide operations\n  async getPesticideApplicationsByFieldId(fieldId: string): Promise<PesticideApplication[]> {\n    return Array.from(this.pesticideApplications.values()).filter(app => app.fieldId === fieldId);\n  }\n\n  async getPesticideApplicationsByUserId(userId: string): Promise<PesticideApplication[]> {\n    const userFields = await this.getFieldsByUserId(userId);\n    const fieldIds = userFields.map(field => field.id);\n    return Array.from(this.pesticideApplications.values()).filter(app => fieldIds.includes(app.fieldId));\n  }\n\n  async createPesticideApplication(insertApplication: InsertPesticideApplication): Promise<PesticideApplication> {\n    const id = randomUUID();\n    const application: PesticideApplication = { \n      ...insertApplication, \n      id, \n      healthRecordId: insertApplication.healthRecordId || null,\n      status: insertApplication.status || 'recommended',\n      recommendedBy: insertApplication.recommendedBy || 'ai_system',\n      scheduledFor: insertApplication.scheduledFor || null,\n      appliedAt: insertApplication.appliedAt || null,\n      createdAt: new Date()\n    };\n    this.pesticideApplications.set(id, application);\n    return application;\n  }\n\n  async updatePesticideApplication(id: string, applicationUpdate: Partial<PesticideApplication>): Promise<PesticideApplication | undefined> {\n    const application = this.pesticideApplications.get(id);\n    if (application) {\n      const updatedApplication = { ...application, ...applicationUpdate };\n      this.pesticideApplications.set(id, updatedApplication);\n      return updatedApplication;\n    }\n    return undefined;\n  }\n\n  // Contact operations\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const message: ContactMessage = { \n      ...insertMessage, \n      id, \n      status: \"new\",\n      createdAt: new Date()\n    };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":12094},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, real, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  role: text(\"role\").notNull().default(\"farmer\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const crops = pgTable(\"crops\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // rice, wheat, cotton, corn\n  plantedDate: timestamp(\"planted_date\").notNull(),\n  expectedHarvestDate: timestamp(\"expected_harvest_date\").notNull(),\n  growthStage: text(\"growth_stage\").notNull().default(\"seedling\"),\n  area: real(\"area\").notNull(), // in hectares\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const fields = pgTable(\"fields\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  cropId: varchar(\"crop_id\").references(() => crops.id),\n  name: text(\"name\").notNull(),\n  latitude: real(\"latitude\").notNull(),\n  longitude: real(\"longitude\").notNull(),\n  area: real(\"area\").notNull(), // in hectares\n  boundaries: text(\"boundaries\"), // JSON string of polygon coordinates\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const droneConnections = pgTable(\"drone_connections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  droneName: text(\"drone_name\").notNull(),\n  connectionType: text(\"connection_type\").notNull(), // wifi, bluetooth\n  status: text(\"status\").notNull().default(\"connected\"), // connected, disconnected, scanning\n  batteryLevel: integer(\"battery_level\").default(100),\n  lastSeen: timestamp(\"last_seen\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const plantHealthRecords = pgTable(\"plant_health_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fieldId: varchar(\"field_id\").notNull().references(() => fields.id),\n  droneId: varchar(\"drone_id\").references(() => droneConnections.id),\n  healthScore: integer(\"health_score\").notNull(), // 0-100\n  infectionRate: real(\"infection_rate\").notNull(), // percentage\n  infectionType: text(\"infection_type\"), // aphid, fungal, bacterial, etc.\n  severity: text(\"severity\").notNull(), // low, medium, high\n  latitude: real(\"latitude\"),\n  longitude: real(\"longitude\"),\n  detectionConfidence: integer(\"detection_confidence\").notNull(), // 0-100\n  recordedAt: timestamp(\"recorded_at\").defaultNow(),\n});\n\nexport const pesticideApplications = pgTable(\"pesticide_applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fieldId: varchar(\"field_id\").notNull().references(() => fields.id),\n  healthRecordId: varchar(\"health_record_id\").references(() => plantHealthRecords.id),\n  pesticideType: text(\"pesticide_type\").notNull(),\n  volumePerHectare: real(\"volume_per_hectare\").notNull(), // liters\n  totalVolume: real(\"total_volume\").notNull(), // liters\n  applicationMethod: text(\"application_method\").notNull().default(\"drone\"),\n  status: text(\"status\").notNull().default(\"recommended\"), // recommended, scheduled, applied, completed\n  recommendedBy: text(\"recommended_by\").default(\"ai_system\"),\n  confidence: integer(\"confidence\").notNull(), // 0-100\n  scheduledFor: timestamp(\"scheduled_for\"),\n  appliedAt: timestamp(\"applied_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").default(\"new\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCropSchema = createInsertSchema(crops).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFieldSchema = createInsertSchema(fields).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDroneConnectionSchema = createInsertSchema(droneConnections).omit({\n  id: true,\n  createdAt: true,\n  lastSeen: true,\n});\n\nexport const insertPlantHealthRecordSchema = createInsertSchema(plantHealthRecords).omit({\n  id: true,\n  recordedAt: true,\n});\n\nexport const insertPesticideApplicationSchema = createInsertSchema(pesticideApplications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Crop = typeof crops.$inferSelect;\nexport type InsertCrop = z.infer<typeof insertCropSchema>;\nexport type Field = typeof fields.$inferSelect;\nexport type InsertField = z.infer<typeof insertFieldSchema>;\nexport type DroneConnection = typeof droneConnections.$inferSelect;\nexport type InsertDroneConnection = z.infer<typeof insertDroneConnectionSchema>;\nexport type PlantHealthRecord = typeof plantHealthRecords.$inferSelect;\nexport type InsertPlantHealthRecord = z.infer<typeof insertPlantHealthRecordSchema>;\nexport type PesticideApplication = typeof pesticideApplications.$inferSelect;\nexport type InsertPesticideApplication = z.infer<typeof insertPesticideApplicationSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\n","size_bytes":6273},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nimport LandingPage from \"@/pages/landing\";\nimport LoginPage from \"@/pages/login\";\nimport SignupPage from \"@/pages/signup\";\nimport DashboardPage from \"@/pages/dashboard\";\nimport CropSelectionPage from \"@/pages/crop-selection\";\nimport DroneConnectionPage from \"@/pages/drone-connection\";\nimport FieldMapPage from \"@/pages/field-map\";\nimport PlantHealthPage from \"@/pages/plant-health\";\nimport PesticideControlPage from \"@/pages/pesticide-control\";\nimport ContactPage from \"@/pages/contact\";\nimport NotFound from \"@/pages/not-found\";\n\nimport { SidebarLayout } from \"@/components/ui/sidebar-layout\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <LandingPage />;\n  }\n\n  return <SidebarLayout>{children}</SidebarLayout>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LandingPage} />\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/signup\" component={SignupPage} />\n      \n      {/* Protected routes */}\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <DashboardPage />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/crop-selection\">\n        <ProtectedRoute>\n          <CropSelectionPage />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/drone-connection\">\n        <ProtectedRoute>\n          <DroneConnectionPage />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/field-map\">\n        <ProtectedRoute>\n          <FieldMapPage />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/plant-health\">\n        <ProtectedRoute>\n          <PlantHealthPage />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/pesticide-control\">\n        <ProtectedRoute>\n          <PesticideControlPage />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/contact\">\n        <ProtectedRoute>\n          <ContactPage />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2843},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(135, 10%, 96%);\n  --foreground: hsl(135, 20%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(135, 20%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(135, 20%, 15%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(32, 95%, 44%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(135, 10%, 90%);\n  --muted-foreground: hsl(135, 20%, 45%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(135, 20%, 15%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(135, 20%, 82%);\n  --input: hsl(135, 20%, 90%);\n  --ring: hsl(142, 76%, 36%);\n  --chart-1: hsl(142, 76%, 36%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(43, 96%, 56%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(135, 20%, 15%);\n  --sidebar-primary: hsl(142, 76%, 36%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(135, 10%, 90%);\n  --sidebar-accent-foreground: hsl(142, 76%, 36%);\n  --sidebar-border: hsl(135, 20%, 82%);\n  --sidebar-ring: hsl(142, 76%, 36%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00), 0px 1px 2px -1px hsl(142, 76%, 36% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00), 0px 1px 2px -1px hsl(142, 76%, 36% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00), 0px 2px 4px -1px hsl(142, 76%, 36% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00), 0px 4px 6px -1px hsl(142, 76%, 36% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00), 0px 8px 10px -1px hsl(142, 76%, 36% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(135, 20%, 8%);\n  --foreground: hsl(135, 10%, 85%);\n  --card: hsl(135, 15%, 12%);\n  --card-foreground: hsl(135, 10%, 85%);\n  --popover: hsl(135, 15%, 12%);\n  --popover-foreground: hsl(135, 10%, 85%);\n  --primary: hsl(142, 76%, 42%);\n  --primary-foreground: hsl(135, 20%, 8%);\n  --secondary: hsl(32, 80%, 38%);\n  --secondary-foreground: hsl(135, 10%, 85%);\n  --muted: hsl(135, 15%, 18%);\n  --muted-foreground: hsl(135, 10%, 55%);\n  --accent: hsl(43, 86%, 48%);\n  --accent-foreground: hsl(135, 20%, 8%);\n  --destructive: hsl(0, 75%, 55%);\n  --destructive-foreground: hsl(135, 10%, 85%);\n  --border: hsl(135, 15%, 18%);\n  --input: hsl(135, 15%, 18%);\n  --ring: hsl(142, 76%, 42%);\n  --chart-1: hsl(142, 76%, 42%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(43, 86%, 48%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(135, 15%, 12%);\n  --sidebar-foreground: hsl(135, 10%, 85%);\n  --sidebar-primary: hsl(142, 76%, 42%);\n  --sidebar-primary-foreground: hsl(135, 20%, 8%);\n  --sidebar-accent: hsl(135, 15%, 18%);\n  --sidebar-accent-foreground: hsl(142, 76%, 42%);\n  --sidebar-border: hsl(135, 15%, 18%);\n  --sidebar-ring: hsl(142, 76%, 42%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.leaflet-container {\n  height: 100%;\n  width: 100%;\n  border-radius: var(--radius);\n}\n","size_bytes":3746},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { authService, type AuthUser, type AuthResponse } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: user, isLoading } = useQuery({\n    queryKey: ['auth', 'me'],\n    queryFn: () => authService.getCurrentUser(),\n    staleTime: Infinity,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: (credentials: { username: string; password: string }) =>\n      authService.login(credentials),\n    onSuccess: (data: AuthResponse) => {\n      queryClient.setQueryData(['auth', 'me'], data.user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${data.user.fullName}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Login failed\",\n        description: error.message,\n      });\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: (userData: {\n      username: string;\n      email: string;\n      password: string;\n      fullName: string;\n    }) => authService.signup(userData),\n    onSuccess: (data: AuthResponse) => {\n      queryClient.setQueryData(['auth', 'me'], data.user);\n      toast({\n        title: \"Account created successfully\",\n        description: `Welcome to AgriSmart, ${data.user.fullName}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Signup failed\",\n        description: error.message,\n      });\n    },\n  });\n\n  const logout = () => {\n    authService.logout();\n    queryClient.setQueryData(['auth', 'me'], null);\n    queryClient.clear();\n    toast({\n      title: \"Logged out\",\n      description: \"You have been logged out successfully.\",\n    });\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login: loginMutation.mutate,\n    signup: signupMutation.mutate,\n    logout,\n    isLoginPending: loginMutation.isPending,\n    isSignupPending: signupMutation.isPending,\n  };\n}\n","size_bytes":2112},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface AuthUser {\n  id: string;\n  username: string;\n  email: string;\n  fullName: string;\n  role: string;\n}\n\nexport interface AuthResponse {\n  user: AuthUser;\n  token: string;\n}\n\nclass AuthService {\n  private token: string | null = null;\n  private user: AuthUser | null = null;\n\n  constructor() {\n    this.token = localStorage.getItem('auth_token');\n    const userData = localStorage.getItem('auth_user');\n    if (userData) {\n      try {\n        this.user = JSON.parse(userData);\n      } catch {\n        localStorage.removeItem('auth_user');\n      }\n    }\n  }\n\n  async login(credentials: { username: string; password: string }): Promise<AuthResponse> {\n    const response = await apiRequest('POST', '/api/auth/login', credentials);\n    const data: AuthResponse = await response.json();\n    \n    this.setAuthData(data);\n    return data;\n  }\n\n  async signup(userData: { \n    username: string; \n    email: string; \n    password: string; \n    fullName: string \n  }): Promise<AuthResponse> {\n    const response = await apiRequest('POST', '/api/auth/signup', userData);\n    const data: AuthResponse = await response.json();\n    \n    this.setAuthData(data);\n    return data;\n  }\n\n  async getCurrentUser(): Promise<AuthUser | null> {\n    if (!this.token) return null;\n    \n    try {\n      const response = await fetch('/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${this.token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        this.logout();\n        return null;\n      }\n      \n      const data = await response.json();\n      this.user = data.user;\n      localStorage.setItem('auth_user', JSON.stringify(this.user));\n      return this.user;\n    } catch {\n      this.logout();\n      return null;\n    }\n  }\n\n  logout(): void {\n    this.token = null;\n    this.user = null;\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n  }\n\n  getToken(): string | null {\n    return this.token;\n  }\n\n  getUser(): AuthUser | null {\n    return this.user;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token && !!this.user;\n  }\n\n  private setAuthData(data: AuthResponse): void {\n    this.token = data.token;\n    this.user = data.user;\n    localStorage.setItem('auth_token', this.token);\n    localStorage.setItem('auth_user', JSON.stringify(this.user));\n  }\n}\n\nexport const authService = new AuthService();\n\n// Helper function to add auth header to requests\nexport function withAuth(headers: HeadersInit = {}): HeadersInit {\n  const token = authService.getToken();\n  if (token) {\n    return {\n      ...headers,\n      'Authorization': `Bearer ${token}`,\n    };\n  }\n  return headers;\n}\n","size_bytes":2693},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/contact.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nimport { \n  Mail, \n  Phone, \n  MapPin, \n  Clock, \n  Send,\n  MessageSquare,\n  HeadphonesIcon,\n  FileText\n} from \"lucide-react\";\n\nconst contactSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  subject: z.string().min(5, \"Subject must be at least 5 characters\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n  priority: z.enum([\"low\", \"medium\", \"high\"], {\n    required_error: \"Please select a priority level\",\n  }),\n});\n\ntype ContactFormData = z.infer<typeof contactSchema>;\n\nexport default function ContactPage() {\n  const { toast } = useToast();\n\n  const submitContactMutation = useMutation({\n    mutationFn: async (data: ContactFormData) => {\n      const response = await fetch('/api/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to send message');\n      return response.json();\n    },\n    onSuccess: () => {\n      reset();\n      toast({\n        title: \"Message sent successfully\",\n        description: \"We'll get back to you within 24 hours. Thank you for contacting AgriSmart!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to send message\",\n        description: error.message,\n      });\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm<ContactFormData>({\n    resolver: zodResolver(contactSchema),\n  });\n\n  const onSubmit = (data: ContactFormData) => {\n    submitContactMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-bold mb-2\">Contact Support</h1>\n        <p className=\"text-muted-foreground text-lg\">\n          Need help with AgriSmart? Our expert support team is here to assist you.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Contact Information */}\n        <div className=\"space-y-6\">\n          {/* Support Hours */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"text-primary\" size={20} />\n                <span>Support Hours</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Monday - Friday</span>\n                <span className=\"font-medium\">8:00 AM - 8:00 PM</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Saturday</span>\n                <span className=\"font-medium\">9:00 AM - 5:00 PM</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Sunday</span>\n                <span className=\"font-medium\">10:00 AM - 4:00 PM</span>\n              </div>\n              <div className=\"pt-2 border-t border-border\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Emergency support available 24/7 for critical issues\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Contact Methods */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <MessageSquare className=\"text-primary\" size={20} />\n                <span>Get In Touch</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Mail className=\"text-primary\" size={18} />\n                </div>\n                <div>\n                  <p className=\"font-medium\">Email Support</p>\n                  <p className=\"text-sm text-muted-foreground\">support@agrismart.com</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                  <Phone className=\"text-secondary\" size={18} />\n                </div>\n                <div>\n                  <p className=\"font-medium\">Phone Support</p>\n                  <p className=\"text-sm text-muted-foreground\">+91 800-123-4567</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <HeadphonesIcon className=\"text-accent\" size={18} />\n                </div>\n                <div>\n                  <p className=\"font-medium\">Live Chat</p>\n                  <p className=\"text-sm text-muted-foreground\">Available during support hours</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-muted rounded-lg flex items-center justify-center\">\n                  <MapPin className=\"text-muted-foreground\" size={18} />\n                </div>\n                <div>\n                  <p className=\"font-medium\">Office Address</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    AgriSmart Technologies<br />\n                    123 Innovation Drive<br />\n                    New Delhi, India 110001\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Common Issues */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"text-primary\" size={20} />\n                <span>Common Issues</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start text-left h-auto p-3\"\n                  data-testid=\"button-faq-drone\"\n                >\n                  <div>\n                    <p className=\"font-medium\">Drone Connection Issues</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Troubleshooting WiFi and Bluetooth connectivity\n                    </p>\n                  </div>\n                </Button>\n\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start text-left h-auto p-3\"\n                  data-testid=\"button-faq-calibration\"\n                >\n                  <div>\n                    <p className=\"font-medium\">Sensor Calibration</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      AI detection accuracy and sensor setup\n                    </p>\n                  </div>\n                </Button>\n\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start text-left h-auto p-3\"\n                  data-testid=\"button-faq-pesticide\"\n                >\n                  <div>\n                    <p className=\"font-medium\">Pesticide Recommendations</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Understanding AI-powered treatment suggestions\n                    </p>\n                  </div>\n                </Button>\n\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start text-left h-auto p-3\"\n                  data-testid=\"button-faq-billing\"\n                >\n                  <div>\n                    <p className=\"font-medium\">Billing & Subscription</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Account management and payment issues\n                    </p>\n                  </div>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Contact Form */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Send className=\"text-primary\" size={20} />\n                <span>Send us a Message</span>\n              </CardTitle>\n              <p className=\"text-muted-foreground\">\n                Fill out the form below and we'll respond within 24 hours\n              </p>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Full Name *</Label>\n                    <Input\n                      id=\"name\"\n                      placeholder=\"Enter your full name\"\n                      {...register(\"name\")}\n                      data-testid=\"input-name\"\n                    />\n                    {errors.name && (\n                      <p className=\"text-destructive text-sm\">{errors.name.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email address\"\n                      {...register(\"email\")}\n                      data-testid=\"input-email\"\n                    />\n                    {errors.email && (\n                      <p className=\"text-destructive text-sm\">{errors.email.message}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"subject\">Subject *</Label>\n                  <Input\n                    id=\"subject\"\n                    placeholder=\"Brief description of your inquiry\"\n                    {...register(\"subject\")}\n                    data-testid=\"input-subject\"\n                  />\n                  {errors.subject && (\n                    <p className=\"text-destructive text-sm\">{errors.subject.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"priority\">Priority Level *</Label>\n                  <select \n                    id=\"priority\"\n                    {...register(\"priority\")}\n                    className=\"w-full px-3 py-2 border border-border rounded-md bg-background\"\n                    data-testid=\"select-priority\"\n                  >\n                    <option value=\"\">Select priority level</option>\n                    <option value=\"low\">Low - General inquiry</option>\n                    <option value=\"medium\">Medium - Technical assistance needed</option>\n                    <option value=\"high\">High - Urgent issue affecting operations</option>\n                  </select>\n                  {errors.priority && (\n                    <p className=\"text-destructive text-sm\">{errors.priority.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"message\">Message *</Label>\n                  <Textarea\n                    id=\"message\"\n                    rows={6}\n                    placeholder=\"Please provide detailed information about your inquiry, including any error messages, steps you've taken, and your current system setup...\"\n                    {...register(\"message\")}\n                    data-testid=\"textarea-message\"\n                  />\n                  {errors.message && (\n                    <p className=\"text-destructive text-sm\">{errors.message.message}</p>\n                  )}\n                  <p className=\"text-sm text-muted-foreground\">\n                    The more details you provide, the better we can assist you.\n                  </p>\n                </div>\n\n                <div className=\"bg-muted/30 p-4 rounded-lg\">\n                  <div className=\"flex items-start space-x-2\">\n                    <FileText className=\"text-muted-foreground mt-0.5\" size={16} />\n                    <div className=\"text-sm\">\n                      <p className=\"font-medium mb-1\">For faster resolution, please include:</p>\n                      <ul className=\"text-muted-foreground space-y-1\">\n                        <li>• Your account email address</li>\n                        <li>• Device model and operating system</li>\n                        <li>• Screenshots of any error messages</li>\n                        <li>• Steps to reproduce the issue</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={submitContactMutation.isPending}\n                    data-testid=\"button-send-message\"\n                  >\n                    {submitContactMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary-foreground mr-2\"></div>\n                        Sending Message...\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"mr-2\" size={16} />\n                        Send Message\n                      </>\n                    )}\n                  </Button>\n                  \n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => reset()}\n                    data-testid=\"button-clear-form\"\n                  >\n                    Clear Form\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Response Time Information */}\n          <Card className=\"mt-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-center\">\n                <div className=\"space-y-2\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n                    <Clock className=\"text-primary\" size={20} />\n                  </div>\n                  <h3 className=\"font-medium\">Response Time</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    We aim to respond to all inquiries within 24 hours\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center mx-auto\">\n                    <HeadphonesIcon className=\"text-secondary\" size={20} />\n                  </div>\n                  <h3 className=\"font-medium\">Expert Support</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Our team includes agricultural experts and technical specialists\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"w-12 h-12 bg-accent/10 rounded-full flex items-center justify-center mx-auto\">\n                    <MessageSquare className=\"text-accent\" size={20} />\n                  </div>\n                  <h3 className=\"font-medium\">Follow-up</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    We'll follow up to ensure your issue is completely resolved\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16702},"client/src/pages/crop-selection.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { withAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\n\nimport { Wheat, Sprout, Flower, Popcorn, Plus, Calendar, MapPin, Settings } from \"lucide-react\";\n\ninterface Crop {\n  id: string;\n  name: string;\n  type: string;\n  plantedDate: string;\n  expectedHarvestDate: string;\n  growthStage: string;\n  area: number;\n  isActive: boolean;\n}\n\nconst cropTypes = [\n  { value: \"rice\", label: \"Rice\", icon: Wheat, color: \"bg-primary/10 text-primary border-primary\" },\n  { value: \"wheat\", label: \"Wheat\", icon: Wheat, color: \"bg-secondary/10 text-secondary border-secondary\" },\n  { value: \"cotton\", label: \"Cotton\", icon: Flower, color: \"bg-accent/10 text-accent border-accent\" },\n  { value: \"corn\", label: \"Popcorn\", icon: Popcorn, color: \"bg-destructive/10 text-destructive border-destructive\" },\n];\n\nconst growthStages = [\"seedling\", \"vegetative\", \"flowering\", \"fruiting\", \"maturity\"];\n\nconst cropSchema = z.object({\n  name: z.string().min(1, \"Crop name is required\"),\n  type: z.string().min(1, \"Crop type is required\"),\n  plantedDate: z.string().min(1, \"Planted date is required\"),\n  expectedHarvestDate: z.string().min(1, \"Expected harvest date is required\"),\n  growthStage: z.string().min(1, \"Growth stage is required\"),\n  area: z.string().min(1, \"Area is required\").transform((val) => parseFloat(val)),\n});\n\ntype CropFormData = z.infer<typeof cropSchema>;\n\nexport default function CropSelectionPage() {\n  const [selectedCrop, setSelectedCrop] = useState<Crop | null>(null);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: crops, isLoading } = useQuery({\n    queryKey: ['/api/crops'],\n    queryFn: async () => {\n      const response = await fetch('/api/crops', {\n        headers: withAuth(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch crops');\n      return response.json() as Promise<Crop[]>;\n    },\n  });\n\n  const createCropMutation = useMutation({\n    mutationFn: async (cropData: CropFormData) => {\n      const response = await fetch('/api/crops', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...withAuth(),\n        },\n        body: JSON.stringify(cropData),\n      });\n      if (!response.ok) throw new Error('Failed to create crop');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/crops'] });\n      setIsAddDialogOpen(false);\n      reset();\n      toast({\n        title: \"Crop added successfully\",\n        description: \"Your new crop has been added to your farm.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to add crop\",\n        description: error.message,\n      });\n    },\n  });\n\n  const updateCropMutation = useMutation({\n    mutationFn: async ({ id, ...cropData }: { id: string } & Partial<Crop>) => {\n      const response = await fetch(`/api/crops/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          ...withAuth(),\n        },\n        body: JSON.stringify(cropData),\n      });\n      if (!response.ok) throw new Error('Failed to update crop');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/crops'] });\n      toast({\n        title: \"Crop updated successfully\",\n        description: \"Crop information has been updated.\",\n      });\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    setValue,\n    watch\n  } = useForm<CropFormData>({\n    resolver: zodResolver(cropSchema),\n  });\n\n  const watchedType = watch(\"type\");\n\n  const onSubmit = (data: CropFormData) => {\n    createCropMutation.mutate(data);\n  };\n\n  const handleActivateCrop = (crop: Crop) => {\n    // Deactivate all crops first, then activate selected one\n    crops?.forEach((c) => {\n      if (c.id !== crop.id && c.isActive) {\n        updateCropMutation.mutate({ id: c.id, isActive: false });\n      }\n    });\n    \n    updateCropMutation.mutate({ id: crop.id, isActive: true });\n    setSelectedCrop(crop);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const activeCrop = crops?.find(crop => crop.isActive);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Crop Selection</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your crops and select which one to monitor actively\n          </p>\n        </div>\n        \n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-crop\">\n              <Plus className=\"mr-2\" size={16} />\n              Add New Crop\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Crop</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Crop Name</Label>\n                <Input\n                  id=\"name\"\n                  placeholder=\"e.g., North Field Rice\"\n                  {...register(\"name\")}\n                  data-testid=\"input-crop-name\"\n                />\n                {errors.name && (\n                  <p className=\"text-destructive text-sm\">{errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\">Crop Type</Label>\n                <Select onValueChange={(value) => setValue(\"type\", value)}>\n                  <SelectTrigger data-testid=\"select-crop-type\">\n                    <SelectValue placeholder=\"Select crop type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {cropTypes.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {errors.type && (\n                  <p className=\"text-destructive text-sm\">{errors.type.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"area\">Area (hectares)</Label>\n                <Input\n                  id=\"area\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"e.g., 2.5\"\n                  {...register(\"area\")}\n                  data-testid=\"input-crop-area\"\n                />\n                {errors.area && (\n                  <p className=\"text-destructive text-sm\">{errors.area.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"plantedDate\">Planted Date</Label>\n                <Input\n                  id=\"plantedDate\"\n                  type=\"date\"\n                  {...register(\"plantedDate\")}\n                  data-testid=\"input-planted-date\"\n                />\n                {errors.plantedDate && (\n                  <p className=\"text-destructive text-sm\">{errors.plantedDate.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"expectedHarvestDate\">Expected Harvest Date</Label>\n                <Input\n                  id=\"expectedHarvestDate\"\n                  type=\"date\"\n                  {...register(\"expectedHarvestDate\")}\n                  data-testid=\"input-harvest-date\"\n                />\n                {errors.expectedHarvestDate && (\n                  <p className=\"text-destructive text-sm\">{errors.expectedHarvestDate.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"growthStage\">Growth Stage</Label>\n                <Select onValueChange={(value) => setValue(\"growthStage\", value)}>\n                  <SelectTrigger data-testid=\"select-growth-stage\">\n                    <SelectValue placeholder=\"Select growth stage\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {growthStages.map((stage) => (\n                      <SelectItem key={stage} value={stage}>\n                        {stage.charAt(0).toUpperCase() + stage.slice(1)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {errors.growthStage && (\n                  <p className=\"text-destructive text-sm\">{errors.growthStage.message}</p>\n                )}\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setIsAddDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1\"\n                  disabled={createCropMutation.isPending}\n                  data-testid=\"button-save-crop\"\n                >\n                  {createCropMutation.isPending ? \"Adding...\" : \"Add Crop\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Active Crop Summary */}\n      {activeCrop && (\n        <Card className=\"border-primary/50\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center space-x-2\">\n                <span>Currently Active Crop</span>\n                <Badge className=\"bg-primary text-primary-foreground\">Active</Badge>\n              </CardTitle>\n              <Button variant=\"outline\" size=\"sm\">\n                <Settings size={16} className=\"mr-2\" />\n                Manage\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <h4 className=\"font-medium mb-2\">{activeCrop.name}</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  {cropTypes.find(t => t.value === activeCrop.type)?.label} • {activeCrop.area} hectares\n                </p>\n              </div>\n              <div>\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Calendar size={14} />\n                  <span className=\"text-sm font-medium\">Growth Stage</span>\n                </div>\n                <p className=\"text-sm text-primary font-medium capitalize\">\n                  {activeCrop.growthStage}\n                </p>\n              </div>\n              <div>\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <MapPin size={14} />\n                  <span className=\"text-sm font-medium\">Expected Harvest</span>\n                </div>\n                <p className=\"text-sm\">\n                  {new Date(activeCrop.expectedHarvestDate).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Crop Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {crops?.map((crop) => {\n          const cropType = cropTypes.find(t => t.value === crop.type);\n          const Icon = cropType?.icon || Wheat;\n          \n          return (\n            <Card\n              key={crop.id}\n              className={`cursor-pointer transition-all hover:shadow-md ${\n                crop.isActive \n                  ? 'border-primary/50 bg-primary/5' \n                  : 'hover:border-border'\n              }`}\n              onClick={() => !crop.isActive && handleActivateCrop(crop)}\n              data-testid={`crop-card-${crop.id}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n                      crop.isActive ? 'bg-primary text-primary-foreground' : cropType?.color\n                    }`}>\n                      <Icon size={24} />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">{crop.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {cropType?.label}\n                      </p>\n                    </div>\n                  </div>\n                  {crop.isActive && (\n                    <Badge className=\"bg-primary text-primary-foreground text-xs\">\n                      Active\n                    </Badge>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Area</span>\n                    <span className=\"font-medium\">{crop.area} ha</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Growth Stage</span>\n                    <span className=\"font-medium capitalize text-primary\">\n                      {crop.growthStage}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Planted</span>\n                    <span className=\"font-medium\">\n                      {new Date(crop.plantedDate).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Harvest Expected</span>\n                    <span className=\"font-medium\">\n                      {new Date(crop.expectedHarvestDate).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n\n                {!crop.isActive && (\n                  <div className=\"mt-4 pt-4 border-t border-border\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleActivateCrop(crop);\n                      }}\n                      data-testid={`button-activate-${crop.id}`}\n                    >\n                      Select This Crop\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {crops?.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Sprout className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n            <h3 className=\"text-lg font-medium mb-2\">No crops added yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Get started by adding your first crop to begin monitoring plant health.\n            </p>\n            <Button onClick={() => setIsAddDialogOpen(true)} data-testid=\"button-add-first-crop\">\n              <Plus className=\"mr-2\" size={16} />\n              Add Your First Crop\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":16871},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { withAuth } from \"@/lib/auth\";\nimport { \n  Map, \n  Wheat, \n  AlertTriangle, \n  Leaf, \n  ArrowUp, \n  ArrowDown,\n  CheckCircle,\n  TriangleAlert,\n  Wifi,\n  Sprout\n} from \"lucide-react\";\n\ninterface DashboardStats {\n  totalFields: number;\n  healthyPlants: number;\n  infectionRate: number;\n  pesticideSaved: number;\n}\n\nexport default function DashboardPage() {\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    queryFn: async () => {\n      const response = await fetch('/api/dashboard/stats', {\n        headers: withAuth(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch stats');\n      return response.json() as Promise<DashboardStats>;\n    },\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"bg-card rounded-lg p-6 border border-border animate-pulse\">\n              <div className=\"h-4 bg-muted rounded w-1/2 mb-2\"></div>\n              <div className=\"h-8 bg-muted rounded w-3/4\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quick Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Fields</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-total-fields\">\n                  {stats?.totalFields || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Map className=\"text-primary\" size={24} />\n              </div>\n            </div>\n            <div className=\"flex items-center mt-4 text-sm\">\n              <ArrowUp className=\"text-primary mr-1\" size={12} />\n              <span className=\"text-primary\">8.2%</span>\n              <span className=\"text-muted-foreground ml-1\">from last month</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Healthy Plants</p>\n                <p className=\"text-2xl font-bold text-primary\" data-testid=\"stat-healthy-plants\">\n                  {stats?.healthyPlants?.toLocaleString() || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Wheat className=\"text-primary\" size={24} />\n              </div>\n            </div>\n            <div className=\"flex items-center mt-4 text-sm\">\n              <ArrowUp className=\"text-primary mr-1\" size={12} />\n              <span className=\"text-primary\">12.5%</span>\n              <span className=\"text-muted-foreground ml-1\">from last week</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Infection Rate</p>\n                <p className=\"text-2xl font-bold text-accent\" data-testid=\"stat-infection-rate\">\n                  {stats?.infectionRate?.toFixed(1) || 0}%\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <AlertTriangle className=\"text-accent\" size={24} />\n              </div>\n            </div>\n            <div className=\"flex items-center mt-4 text-sm\">\n              <ArrowDown className=\"text-primary mr-1\" size={12} />\n              <span className=\"text-primary\">2.1%</span>\n              <span className=\"text-muted-foreground ml-1\">from yesterday</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Pesticide Saved</p>\n                <p className=\"text-2xl font-bold text-primary\" data-testid=\"stat-pesticide-saved\">\n                  {stats?.pesticideSaved || 0}L\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Leaf className=\"text-primary\" size={24} />\n              </div>\n            </div>\n            <div className=\"flex items-center mt-4 text-sm\">\n              <ArrowUp className=\"text-primary mr-1\" size={12} />\n              <span className=\"text-primary\">15.8%</span>\n              <span className=\"text-muted-foreground ml-1\">from last month</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Dashboard Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Field Overview */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader className=\"border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Field Overview</CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <Button size=\"sm\" data-testid=\"button-live-view\">Live View</Button>\n                  <Button variant=\"outline\" size=\"sm\">Historical</Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"w-full h-80 bg-muted rounded-lg relative overflow-hidden\">\n                {/* Field visualization placeholder */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 to-secondary/20\"></div>\n                \n                {/* Legend */}\n                <div className=\"absolute top-4 left-4 bg-card rounded-lg p-3 shadow-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <div className=\"w-3 h-3 bg-primary rounded-full\"></div>\n                    <span className=\"text-sm\">Healthy (87%)</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <div className=\"w-3 h-3 bg-accent rounded-full\"></div>\n                    <span className=\"text-sm\">Mild Infection (10%)</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-destructive rounded-full\"></div>\n                    <span className=\"text-sm\">Severe (3%)</span>\n                  </div>\n                </div>\n                \n                {/* Field zones visualization */}\n                <div className=\"absolute top-12 right-8 w-24 h-16 bg-primary/30 rounded-lg border-2 border-primary\"></div>\n                <div className=\"absolute top-32 right-12 w-20 h-20 bg-accent/40 rounded-lg border-2 border-accent\"></div>\n                <div className=\"absolute bottom-16 left-12 w-16 h-12 bg-destructive/40 rounded-lg border-2 border-destructive\"></div>\n                \n                <div className=\"absolute bottom-4 right-4 bg-card rounded-lg p-2 text-xs\">\n                  <span className=\"text-muted-foreground\">Last updated: 5 min ago</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Drone Status */}\n        <Card>\n          <CardHeader className=\"border-b border-border\">\n            <CardTitle>Drone Status</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6 space-y-4\">\n            <div className=\"flex items-center justify-between p-4 bg-primary/5 rounded-lg border border-primary/20\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-3 h-3 bg-primary rounded-full animate-pulse\"></div>\n                <div>\n                  <p className=\"font-medium\">Drone Alpha-1</p>\n                  <p className=\"text-sm text-muted-foreground\">Connected via WiFi</p>\n                </div>\n              </div>\n              <span className=\"text-sm bg-primary text-primary-foreground px-2 py-1 rounded\">\n                Active\n              </span>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg border border-border\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-3 h-3 bg-muted-foreground rounded-full\"></div>\n                <div>\n                  <p className=\"font-medium\">Drone Beta-2</p>\n                  <p className=\"text-sm text-muted-foreground\">Bluetooth ready</p>\n                </div>\n              </div>\n              <span className=\"text-sm bg-muted text-muted-foreground px-2 py-1 rounded\">\n                Standby\n              </span>\n            </div>\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Quick Actions</h4>\n              <Button className=\"w-full\" data-testid=\"button-connect-drone\">\n                <Wifi className=\"mr-2\" size={16} />\n                Connect New Drone\n              </Button>\n              <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-start-scan\">\n                Start Field Scan\n              </Button>\n            </div>\n\n            <div className=\"pt-4 border-t border-border\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Battery Level</span>\n                  <span className=\"font-medium\">87%</span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div className=\"bg-primary h-2 rounded-full\" style={{ width: '87%' }}></div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* AI Recommendations */}\n      <Card>\n        <CardHeader className=\"border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>AI-Powered Recommendations</CardTitle>\n            <span className=\"text-sm bg-accent text-accent-foreground px-3 py-1 rounded-full\">\n              AI Powered\n            </span>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Recommendation 1 */}\n            <div className=\"p-4 bg-accent/10 border border-accent/30 rounded-lg\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                    <TriangleAlert className=\"text-accent-foreground\" size={16} />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Medium Priority</h4>\n                    <p className=\"text-sm text-muted-foreground\">Field Zone A-3</p>\n                  </div>\n                </div>\n                <span className=\"text-xs bg-accent text-accent-foreground px-2 py-1 rounded\">\n                  Active\n                </span>\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <p><strong>Issue:</strong> Aphid infestation detected (15% coverage)</p>\n                <p><strong>Recommended:</strong> Neem oil spray - 2.5L per hectare</p>\n                <p><strong>Timing:</strong> Early morning application recommended</p>\n              </div>\n              <div className=\"flex items-center justify-between mt-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-xs text-muted-foreground\">Confidence:</span>\n                  <div className=\"w-16 bg-muted rounded-full h-2\">\n                    <div className=\"bg-accent h-2 rounded-full\" style={{ width: '85%' }}></div>\n                  </div>\n                  <span className=\"text-xs font-medium\">85%</span>\n                </div>\n                <Button size=\"sm\" data-testid=\"button-apply-recommendation\">\n                  Apply\n                </Button>\n              </div>\n            </div>\n\n            {/* Recommendation 2 */}\n            <div className=\"p-4 bg-primary/10 border border-primary/30 rounded-lg\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                    <CheckCircle className=\"text-primary-foreground\" size={16} />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Low Priority</h4>\n                    <p className=\"text-sm text-muted-foreground\">Field Zone B-1</p>\n                  </div>\n                </div>\n                <span className=\"text-xs bg-primary text-primary-foreground px-2 py-1 rounded\">\n                  Scheduled\n                </span>\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <p><strong>Issue:</strong> Preventive treatment due</p>\n                <p><strong>Recommended:</strong> Organic fungicide - 1.8L per hectare</p>\n                <p><strong>Timing:</strong> Schedule for tomorrow evening</p>\n              </div>\n              <div className=\"flex items-center justify-between mt-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-xs text-muted-foreground\">Confidence:</span>\n                  <div className=\"w-16 bg-muted rounded-full h-2\">\n                    <div className=\"bg-primary h-2 rounded-full\" style={{ width: '92%' }}></div>\n                  </div>\n                  <span className=\"text-xs font-medium\">92%</span>\n                </div>\n                <Button size=\"sm\" variant=\"outline\" data-testid=\"button-schedule-recommendation\">\n                  Schedule\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader className=\"border-b border-border\">\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start space-x-4 p-3 hover:bg-muted/50 rounded-lg transition-colors\">\n              <div className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0\">\n                <CheckCircle className=\"text-primary\" size={16} />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">Pesticide application completed</p>\n                <p className=\"text-xs text-muted-foreground\">Field Zone A-3 • Neem oil spray applied</p>\n                <p className=\"text-xs text-muted-foreground\">2 minutes ago</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-4 p-3 hover:bg-muted/50 rounded-lg transition-colors\">\n              <div className=\"w-8 h-8 bg-accent/20 rounded-full flex items-center justify-center flex-shrink-0\">\n                <TriangleAlert className=\"text-accent\" size={16} />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">New infection detected</p>\n                <p className=\"text-xs text-muted-foreground\">Field Zone C-2 • Fungal infection spotted</p>\n                <p className=\"text-xs text-muted-foreground\">15 minutes ago</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-4 p-3 hover:bg-muted/50 rounded-lg transition-colors\">\n              <div className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0\">\n                <Wifi className=\"text-primary\" size={16} />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">Drone connected successfully</p>\n                <p className=\"text-xs text-muted-foreground\">Drone Alpha-1 • Ready for field scanning</p>\n                <p className=\"text-xs text-muted-foreground\">1 hour ago</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 pt-4 border-t border-border\">\n            <Button variant=\"ghost\" className=\"w-full text-sm\" data-testid=\"button-view-all-activity\">\n              View all activity →\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":17195},"client/src/pages/drone-connection.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { withAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\n\nimport { Wifi, Bluetooth, Battery, Signal, Plus, Power, Settings, RefreshCw } from \"lucide-react\";\n\ninterface DroneConnection {\n  id: string;\n  droneName: string;\n  connectionType: string;\n  status: string;\n  batteryLevel: number;\n  lastSeen: string;\n}\n\nconst droneSchema = z.object({\n  droneName: z.string().min(1, \"Drone name is required\"),\n  connectionType: z.enum([\"wifi\", \"bluetooth\"], {\n    required_error: \"Connection type is required\",\n  }),\n});\n\ntype DroneFormData = z.infer<typeof droneSchema>;\n\nexport default function DroneConnectionPage() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isScanning, setIsScanning] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: drones, isLoading } = useQuery({\n    queryKey: ['/api/drones'],\n    queryFn: async () => {\n      const response = await fetch('/api/drones', {\n        headers: withAuth(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch drones');\n      return response.json() as Promise<DroneConnection[]>;\n    },\n  });\n\n  const createDroneMutation = useMutation({\n    mutationFn: async (droneData: DroneFormData) => {\n      const response = await fetch('/api/drones', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...withAuth(),\n        },\n        body: JSON.stringify({ ...droneData, status: 'connected', batteryLevel: 100 }),\n      });\n      if (!response.ok) throw new Error('Failed to connect drone');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/drones'] });\n      setIsAddDialogOpen(false);\n      reset();\n      toast({\n        title: \"Drone connected successfully\",\n        description: \"Your drone is now ready for field operations.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to connect drone\",\n        description: error.message,\n      });\n    },\n  });\n\n  const updateDroneMutation = useMutation({\n    mutationFn: async ({ id, ...droneData }: { id: string } & Partial<DroneConnection>) => {\n      const response = await fetch(`/api/drones/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          ...withAuth(),\n        },\n        body: JSON.stringify(droneData),\n      });\n      if (!response.ok) throw new Error('Failed to update drone');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/drones'] });\n      toast({\n        title: \"Drone status updated\",\n        description: \"Drone connection status has been updated.\",\n      });\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    setValue,\n  } = useForm<DroneFormData>({\n    resolver: zodResolver(droneSchema),\n  });\n\n  const onSubmit = (data: DroneFormData) => {\n    createDroneMutation.mutate(data);\n  };\n\n  const handleStatusToggle = (drone: DroneConnection) => {\n    const newStatus = drone.status === 'connected' ? 'disconnected' : 'connected';\n    updateDroneMutation.mutate({ \n      id: drone.id, \n      status: newStatus,\n      batteryLevel: newStatus === 'connected' ? Math.floor(Math.random() * 40) + 60 : drone.batteryLevel\n    });\n  };\n\n  const handleStartScan = async () => {\n    setIsScanning(true);\n    // Simulate scanning process\n    setTimeout(() => {\n      setIsScanning(false);\n      toast({\n        title: \"Field scan initiated\",\n        description: \"Drones are now scanning the field for plant health monitoring.\",\n      });\n    }, 3000);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'connected':\n        return 'bg-primary text-primary-foreground';\n      case 'scanning':\n        return 'bg-secondary text-secondary-foreground';\n      case 'disconnected':\n        return 'bg-muted text-muted-foreground';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getBatteryColor = (level: number) => {\n    if (level > 60) return 'bg-primary';\n    if (level > 30) return 'bg-accent';\n    return 'bg-destructive';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-40 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Drone Connection</h1>\n          <p className=\"text-muted-foreground\">\n            Manage drone connections and monitor their status for field operations\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <Button \n            variant=\"outline\" \n            onClick={handleStartScan}\n            disabled={isScanning || !drones?.some(d => d.status === 'connected')}\n            data-testid=\"button-start-scan\"\n          >\n            {isScanning ? (\n              <RefreshCw className=\"mr-2 animate-spin\" size={16} />\n            ) : (\n              <Signal className=\"mr-2\" size={16} />\n            )}\n            {isScanning ? 'Scanning...' : 'Start Field Scan'}\n          </Button>\n          \n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-connect-drone\">\n                <Plus className=\"mr-2\" size={16} />\n                Connect Drone\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Connect New Drone</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"droneName\">Drone Name</Label>\n                  <Input\n                    id=\"droneName\"\n                    placeholder=\"e.g., Drone Alpha-3\"\n                    {...register(\"droneName\")}\n                    data-testid=\"input-drone-name\"\n                  />\n                  {errors.droneName && (\n                    <p className=\"text-destructive text-sm\">{errors.droneName.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"connectionType\">Connection Type</Label>\n                  <Select onValueChange={(value: \"wifi\" | \"bluetooth\") => setValue(\"connectionType\", value)}>\n                    <SelectTrigger data-testid=\"select-connection-type\">\n                      <SelectValue placeholder=\"Select connection type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"wifi\">WiFi Connection</SelectItem>\n                      <SelectItem value=\"bluetooth\">Bluetooth Connection</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {errors.connectionType && (\n                    <p className=\"text-destructive text-sm\">{errors.connectionType.message}</p>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    onClick={() => setIsAddDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1\"\n                    disabled={createDroneMutation.isPending}\n                    data-testid=\"button-save-drone\"\n                  >\n                    {createDroneMutation.isPending ? \"Connecting...\" : \"Connect\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Connection Status Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Wifi className=\"text-primary\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">\n                  {drones?.filter(d => d.status === 'connected').length || 0}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Active Connections</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <Battery className=\"text-secondary\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">\n                  {drones?.length ? Math.round(drones.reduce((sum, d) => sum + d.batteryLevel, 0) / drones.length) : 0}%\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Average Battery</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <Signal className=\"text-accent\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">\n                  {drones?.filter(d => d.status === 'scanning').length || 0}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Currently Scanning</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Drone Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {drones?.map((drone) => (\n          <Card key={drone.id} className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-muted rounded-lg flex items-center justify-center\">\n                    {drone.connectionType === 'wifi' ? (\n                      <Wifi size={20} className={drone.status === 'connected' ? 'text-primary' : 'text-muted-foreground'} />\n                    ) : (\n                      <Bluetooth size={20} className={drone.status === 'connected' ? 'text-primary' : 'text-muted-foreground'} />\n                    )}\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">{drone.droneName}</h3>\n                    <p className=\"text-sm text-muted-foreground capitalize\">\n                      {drone.connectionType} connection\n                    </p>\n                  </div>\n                </div>\n                \n                <Badge className={getStatusColor(drone.status)} data-testid={`status-${drone.id}`}>\n                  {drone.status.charAt(0).toUpperCase() + drone.status.slice(1)}\n                </Badge>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              {/* Battery Level */}\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium flex items-center\">\n                    <Battery size={14} className=\"mr-1\" />\n                    Battery Level\n                  </span>\n                  <span className=\"text-sm font-bold\">{drone.batteryLevel}%</span>\n                </div>\n                <Progress \n                  value={drone.batteryLevel} \n                  className=\"h-2\" \n                  data-testid={`battery-${drone.id}`}\n                />\n                <div className={`h-1 rounded-full ${getBatteryColor(drone.batteryLevel)}`} \n                     style={{ width: `${drone.batteryLevel}%` }}></div>\n              </div>\n\n              {/* Last Seen */}\n              <div className=\"text-sm\">\n                <span className=\"text-muted-foreground\">Last seen: </span>\n                <span className=\"font-medium\">\n                  {new Date(drone.lastSeen).toLocaleString()}\n                </span>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-2 pt-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex-1\"\n                  onClick={() => handleStatusToggle(drone)}\n                  disabled={updateDroneMutation.isPending}\n                  data-testid={`button-toggle-${drone.id}`}\n                >\n                  <Power size={14} className=\"mr-1\" />\n                  {drone.status === 'connected' ? 'Disconnect' : 'Connect'}\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  data-testid={`button-settings-${drone.id}`}\n                >\n                  <Settings size={14} />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {drones?.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Wifi className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n            <h3 className=\"text-lg font-medium mb-2\">No drones connected</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Connect your first drone to start monitoring your fields and applying precise treatments.\n            </p>\n            <Button onClick={() => setIsAddDialogOpen(true)} data-testid=\"button-connect-first-drone\">\n              <Plus className=\"mr-2\" size={16} />\n              Connect Your First Drone\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Quick Actions */}\n      {drones && drones.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex-col space-y-2\"\n                onClick={() => queryClient.invalidateQueries({ queryKey: ['/api/drones'] })}\n                data-testid=\"button-refresh-status\"\n              >\n                <RefreshCw size={20} />\n                <span>Refresh Status</span>\n              </Button>\n              \n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex-col space-y-2\"\n                disabled={!drones.some(d => d.status === 'connected')}\n                data-testid=\"button-sync-all\"\n              >\n                <Wifi size={20} />\n                <span>Sync All Drones</span>\n              </Button>\n              \n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex-col space-y-2\"\n                data-testid=\"button-diagnostic\"\n              >\n                <Settings size={20} />\n                <span>Run Diagnostics</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":16813},"client/src/pages/field-map.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { withAuth } from \"@/lib/auth\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nimport { Map as MapIcon, Layers, Maximize, ZoomIn, ZoomOut, RotateCcw, Satellite } from \"lucide-react\";\n\ninterface Field {\n  id: string;\n  name: string;\n  latitude: number;\n  longitude: number;\n  area: number;\n  boundaries?: string;\n  cropId?: string;\n}\n\ninterface HealthRecord {\n  id: string;\n  fieldId: string;\n  healthScore: number;\n  infectionRate: number;\n  infectionType?: string;\n  severity: string;\n  latitude?: number;\n  longitude?: number;\n  detectionConfidence: number;\n}\n\nexport default function FieldMapPage() {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n  const [selectedField, setSelectedField] = useState<string>(\"\");\n  const [mapView, setMapView] = useState<\"satellite\" | \"terrain\">(\"satellite\");\n\n  const { data: fields, isLoading: fieldsLoading } = useQuery({\n    queryKey: ['/api/fields'],\n    queryFn: async () => {\n      const response = await fetch('/api/fields', {\n        headers: withAuth(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch fields');\n      return response.json() as Promise<Field[]>;\n    },\n  });\n\n  const { data: healthRecords } = useQuery({\n    queryKey: ['/api/health-records'],\n    queryFn: async () => {\n      const response = await fetch('/api/health-records', {\n        headers: withAuth(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch health records');\n      return response.json() as Promise<HealthRecord[]>;\n    },\n  });\n\n  // Initialize Leaflet map\n  useEffect(() => {\n    if (!mapRef.current || mapInstanceRef.current) return;\n\n    const map = L.map(mapRef.current).setView([28.7041, 77.1025], 13);\n\n    // Add tile layer\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(map);\n\n    mapInstanceRef.current = map;\n\n    // Cleanup\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Add field boundaries and health data to map\n  useEffect(() => {\n    if (!mapInstanceRef.current || !fields || !healthRecords) return;\n\n    // Clear existing layers\n    mapInstanceRef.current.eachLayer((layer: any) => {\n      if (layer.options && (layer.options.isField || layer.options.isHealthMarker)) {\n        mapInstanceRef.current.removeLayer(layer);\n      }\n    });\n\n    // Add field boundaries\n    fields.forEach((field) => {\n      try {\n        let boundaries;\n        if (field.boundaries) {\n          boundaries = JSON.parse(field.boundaries);\n        } else {\n          // Create default boundary around the field center\n          const offset = 0.005;\n          boundaries = [\n            [field.latitude - offset, field.longitude - offset],\n            [field.latitude + offset, field.longitude - offset],\n            [field.latitude + offset, field.longitude + offset],\n            [field.latitude - offset, field.longitude + offset],\n          ];\n        }\n\n        const polygon = L.polygon(boundaries, {\n          color: '#22c55e',\n          fillColor: '#22c55e',\n          fillOpacity: 0.2,\n          isField: true,\n        }).addTo(mapInstanceRef.current);\n\n        polygon.bindPopup(`\n          <div class=\"p-2\">\n            <h3 class=\"font-bold\">${field.name}</h3>\n            <p class=\"text-sm\">Area: ${field.area} hectares</p>\n          </div>\n        `);\n      } catch (error) {\n        console.error('Error parsing field boundaries:', error);\n      }\n    });\n\n    // Add health record markers\n    healthRecords.forEach((record) => {\n      if (record.latitude && record.longitude) {\n        const severityColors = {\n          low: '#22c55e',\n          medium: '#f59e0b',\n          high: '#ef4444',\n        };\n\n        const color = severityColors[record.severity as keyof typeof severityColors] || '#6b7280';\n\n        const marker = L.circleMarker([record.latitude, record.longitude], {\n          radius: 8,\n          fillColor: color,\n          color: 'white',\n          weight: 2,\n          opacity: 1,\n          fillOpacity: 0.8,\n          isHealthMarker: true,\n        }).addTo(mapInstanceRef.current);\n\n        marker.bindPopup(`\n          <div class=\"p-2\">\n            <h4 class=\"font-bold text-sm\">Health Record</h4>\n            <p class=\"text-xs\">Health Score: ${record.healthScore}%</p>\n            <p class=\"text-xs\">Infection Rate: ${record.infectionRate}%</p>\n            <p class=\"text-xs\">Severity: ${record.severity}</p>\n            ${record.infectionType ? `<p class=\"text-xs\">Type: ${record.infectionType}</p>` : ''}\n            <p class=\"text-xs\">Confidence: ${record.detectionConfidence}%</p>\n          </div>\n        `);\n      }\n    });\n\n    // Focus on selected field\n    if (selectedField) {\n      const field = fields.find(f => f.id === selectedField);\n      if (field) {\n        mapInstanceRef.current.setView([field.latitude, field.longitude], 16);\n      }\n    }\n  }, [fields, healthRecords, selectedField]);\n\n  const handleZoomIn = () => {\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.zoomIn();\n    }\n  };\n\n  const handleZoomOut = () => {\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.zoomOut();\n    }\n  };\n\n  const handleResetView = () => {\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.setView([28.7041, 77.1025], 13);\n    }\n  };\n\n  if (fieldsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"h-96 bg-muted rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const fieldHealthSummary = fields?.map(field => {\n    const fieldRecords = healthRecords?.filter(r => r.fieldId === field.id) || [];\n    const avgHealth = fieldRecords.length > 0 \n      ? fieldRecords.reduce((sum, r) => sum + r.healthScore, 0) / fieldRecords.length \n      : 0;\n    const avgInfection = fieldRecords.length > 0 \n      ? fieldRecords.reduce((sum, r) => sum + r.infectionRate, 0) / fieldRecords.length \n      : 0;\n    \n    return {\n      field,\n      avgHealth: Math.round(avgHealth),\n      avgInfection: Math.round(avgInfection * 10) / 10,\n      recordCount: fieldRecords.length\n    };\n  }) || [];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Field Map</h1>\n          <p className=\"text-muted-foreground\">\n            Interactive field visualization with real-time health monitoring and infection tracking\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <Select value={selectedField} onValueChange={setSelectedField}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-field\">\n              <SelectValue placeholder=\"Select field to focus\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All Fields</SelectItem>\n              {fields?.map((field) => (\n                <SelectItem key={field.id} value={field.id}>\n                  {field.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Map and Controls */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Main Map */}\n        <div className=\"lg:col-span-3\">\n          <Card>\n            <CardHeader className=\"border-b border-border pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MapIcon size={20} />\n                  <span>Field Overview Map</span>\n                </CardTitle>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={handleZoomIn} data-testid=\"button-zoom-in\">\n                    <ZoomIn size={16} />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={handleZoomOut} data-testid=\"button-zoom-out\">\n                    <ZoomOut size={16} />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={handleResetView} data-testid=\"button-reset-view\">\n                    <RotateCcw size={16} />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-fullscreen\">\n                    <Maximize size={16} />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"relative\">\n                <div \n                  ref={mapRef} \n                  className=\"w-full h-96 bg-muted\"\n                  data-testid=\"field-map\"\n                />\n                \n                {/* Map Legend */}\n                <div className=\"absolute top-4 left-4 bg-card/95 backdrop-blur rounded-lg p-3 shadow-lg z-[1000]\">\n                  <h4 className=\"font-medium mb-2 text-sm\">Legend</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-primary rounded-full\"></div>\n                      <span className=\"text-xs\">Healthy (&gt;80%)</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-accent rounded-full\"></div>\n                      <span className=\"text-xs\">Mild Infection (40-80%)</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-destructive rounded-full\"></div>\n                      <span className=\"text-xs\">Severe (&lt;40%)</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-4 h-1 bg-primary/30 border border-primary\"></div>\n                      <span className=\"text-xs\">Field Boundary</span>\n                    </div>\n                  </div>\n                </div>\n\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Field Statistics Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Field Summary */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg\">Field Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div className=\"bg-primary/10 rounded-lg p-3\">\n                  <p className=\"text-2xl font-bold text-primary\">{fields?.length || 0}</p>\n                  <p className=\"text-xs text-muted-foreground\">Total Fields</p>\n                </div>\n                <div className=\"bg-secondary/10 rounded-lg p-3\">\n                  <p className=\"text-2xl font-bold text-secondary\">\n                    {fields?.reduce((sum, f) => sum + f.area, 0).toFixed(1) || 0}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">Total Hectares</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Health Records</span>\n                  <span className=\"font-medium\">{healthRecords?.length || 0}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>High Risk Areas</span>\n                  <span className=\"font-medium text-destructive\">\n                    {healthRecords?.filter(r => r.severity === 'high').length || 0}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Last Scan</span>\n                  <span className=\"font-medium\">2 hours ago</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Field Health List */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg\">Field Health Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                {fieldHealthSummary.map(({ field, avgHealth, avgInfection, recordCount }) => (\n                  <div\n                    key={field.id}\n                    className=\"p-3 border border-border rounded-lg hover:bg-muted/50 cursor-pointer transition-colors\"\n                    onClick={() => setSelectedField(field.id)}\n                    data-testid={`field-summary-${field.id}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium text-sm\">{field.name}</h4>\n                      <Badge \n                        variant={avgHealth > 80 ? \"default\" : avgHealth > 60 ? \"secondary\" : \"destructive\"}\n                        className=\"text-xs\"\n                      >\n                        {avgHealth}% Health\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2 text-xs text-muted-foreground\">\n                      <span>Area: {field.area} ha</span>\n                      <span>Infection: {avgInfection}%</span>\n                    </div>\n                    <div className=\"mt-2\">\n                      <div className=\"w-full bg-muted rounded-full h-1\">\n                        <div \n                          className={`h-1 rounded-full ${avgHealth > 80 ? 'bg-primary' : avgHealth > 60 ? 'bg-accent' : 'bg-destructive'}`}\n                          style={{ width: `${avgHealth}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-export-map\">\n                <Satellite className=\"mr-2\" size={14} />\n                Export Map Data\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-download-report\">\n                <Layers className=\"mr-2\" size={14} />\n                Download Report\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-share-view\">\n                <MapIcon className=\"mr-2\" size={14} />\n                Share Map View\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15551},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Leaf, Bot, Shield, BarChart3, CheckCircle } from \"lucide-react\";\n\nexport default function LandingPage() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/60\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <Leaf className=\"text-primary-foreground\" size={20} />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold\">AgriSmart</h1>\n              <p className=\"text-xs text-muted-foreground\">Precision Agriculture</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/login\">\n              <Button variant=\"ghost\" data-testid=\"button-login\">Login</Button>\n            </Link>\n            <Link href=\"/signup\">\n              <Button data-testid=\"button-signup\">Get Started</Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <div className=\"max-w-4xl mx-auto\">\n            <h1 className=\"text-5xl font-bold mb-6 text-foreground\">\n              Intelligent Pesticide Management\n              <span className=\"block text-primary mt-2\">Powered by AI</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-8 leading-relaxed\">\n              Revolutionize your farming with precision spraying technology. \n              Detect plant infections early, reduce pesticide waste, and boost crop yields \n              with our smart agricultural system.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/signup\">\n                <Button size=\"lg\" className=\"min-w-48\" data-testid=\"button-get-started\">\n                  Start Farming Smart\n                </Button>\n              </Link>\n              <Button variant=\"outline\" size=\"lg\" className=\"min-w-48\" data-testid=\"button-learn-more\">\n                Learn More\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4 bg-muted/30\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold mb-4\">Why Choose AgriSmart?</h2>\n            <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n              Our intelligent system combines AI-powered detection with precision spraying \n              to deliver sustainable agriculture solutions.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"text-center\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Bot className=\"text-primary\" size={24} />\n                </div>\n                <CardTitle className=\"text-lg\">Smart Bot Integration</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Connect drones for real-time field monitoring and automated pesticide application.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Shield className=\"text-accent\" size={24} />\n                </div>\n                <CardTitle className=\"text-lg\">AI Disease Detection</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Advanced AI algorithms detect plant diseases and infections with 94% accuracy.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <BarChart3 className=\"text-secondary\" size={24} />\n                </div>\n                <CardTitle className=\"text-lg\">Data Analytics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Comprehensive analytics dashboard to track crop health and optimize treatments.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Leaf className=\"text-primary\" size={24} />\n                </div>\n                <CardTitle className=\"text-lg\">Eco-Friendly</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Reduce pesticide usage by up to 76% while maintaining crop quality and yield.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl font-bold mb-6\">\n                Sustainable Agriculture Made Simple\n              </h2>\n              <p className=\"text-muted-foreground text-lg mb-8\">\n                Transform your farming operations with intelligent automation that protects both \n                your crops and the environment. Our system ensures precise pesticide application \n                only where and when needed.\n              </p>\n              \n              <div className=\"space-y-4\">\n                {[\n                  \"76% reduction in pesticide waste\",\n                  \"94% infection detection accuracy\", \n                  \"Real-time crop health monitoring\",\n                  \"Automated treatment recommendations\",\n                  \"Cost savings up to ₹50,000 per season\"\n                ].map((benefit, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"text-primary\" size={20} />\n                    <span className=\"text-foreground\">{benefit}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"bg-gradient-to-br from-primary/10 to-secondary/10 rounded-2xl p-8\">\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-bold text-primary mb-2\">15,000+</div>\n                <div className=\"text-muted-foreground mb-6\">Farmers Using AgriSmart</div>\n                \n                <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                  <div className=\"bg-card rounded-lg p-4\">\n                    <div className=\"text-2xl font-bold text-accent\">247L</div>\n                    <div className=\"text-sm text-muted-foreground\">Pesticide Saved</div>\n                  </div>\n                  <div className=\"bg-card rounded-lg p-4\">\n                    <div className=\"text-2xl font-bold text-secondary\">98.5%</div>\n                    <div className=\"text-sm text-muted-foreground\">Uptime</div>\n                  </div>\n                </div>\n                \n                <Link href=\"/signup\">\n                  <Button className=\"w-full\" data-testid=\"button-join-farmers\">\n                    Join Thousands of Smart Farmers\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border bg-card py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Leaf className=\"text-primary-foreground\" size={16} />\n              </div>\n              <span className=\"font-bold text-lg\">AgriSmart</span>\n            </div>\n            <p className=\"text-muted-foreground mb-4\">\n              Intelligent pesticide sprinkling system for sustainable agriculture\n            </p>\n            <div className=\"flex justify-center space-x-6\">\n              <Link href=\"/contact\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                Contact Support\n              </Link>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":9347},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Leaf, Eye, EyeOff } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { login, isLoginPending } = useAuth();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    login(data, {\n      onSuccess: () => {\n        setLocation(\"/dashboard\");\n      },\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo */}\n        <div className=\"flex items-center justify-center mb-8\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <Leaf className=\"text-primary-foreground\" size={24} />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold\">AgriSmart</h1>\n              <p className=\"text-sm text-muted-foreground\">Precision Agriculture</p>\n            </div>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center text-2xl\">Welcome Back</CardTitle>\n            <p className=\"text-center text-muted-foreground\">\n              Sign in to your AgriSmart account\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  {...register(\"username\")}\n                  data-testid=\"input-username\"\n                />\n                {errors.username && (\n                  <p className=\"text-destructive text-sm\" data-testid=\"error-username\">\n                    {errors.username.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    {...register(\"password\")}\n                    data-testid=\"input-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                  </Button>\n                </div>\n                {errors.password && (\n                  <p className=\"text-destructive text-sm\" data-testid=\"error-password\">\n                    {errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoginPending}\n                data-testid=\"button-login\"\n              >\n                {isLoginPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">\n                Don't have an account?{\" \"}\n                <Link\n                  href=\"/signup\"\n                  className=\"text-primary hover:underline\"\n                  data-testid=\"link-signup\"\n                >\n                  Sign up\n                </Link>\n              </p>\n              \n              <Link\n                href=\"/\"\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"link-home\"\n              >\n                ← Back to Home\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Demo credentials info */}\n        <Card className=\"mt-4 bg-muted/30\">\n          <CardContent className=\"pt-4\">\n            <p className=\"text-sm text-muted-foreground text-center mb-2\">\n              Demo Credentials:\n            </p>\n            <div className=\"text-sm text-center\">\n              <p><strong>Username:</strong> farmer1</p>\n              <p><strong>Password:</strong> password123</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5510},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pesticide-control.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { withAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\n\nimport { \n  Sprout, \n  Plus, \n  CheckCircle, \n  Clock, \n  AlertTriangle, \n  Droplets,\n  Calendar,\n  Target,\n  BarChart3,\n  TrendingUp,\n  Award,\n  Activity\n} from \"lucide-react\";\n\ninterface PesticideApplication {\n  id: string;\n  fieldId: string;\n  healthRecordId?: string;\n  pesticideType: string;\n  volumePerHectare: number;\n  totalVolume: number;\n  applicationMethod: string;\n  status: string;\n  recommendedBy: string;\n  confidence: number;\n  scheduledFor?: string;\n  appliedAt?: string;\n  createdAt: string;\n}\n\ninterface Field {\n  id: string;\n  name: string;\n  area: number;\n}\n\nconst applicationSchema = z.object({\n  fieldId: z.string().min(1, \"Field selection is required\"),\n  pesticideType: z.string().min(1, \"Pesticide type is required\"),\n  volumePerHectare: z.string().min(1, \"Volume per hectare is required\").transform((val) => parseFloat(val)),\n  applicationMethod: z.string().min(1, \"Application method is required\"),\n  scheduledFor: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype ApplicationFormData = z.infer<typeof applicationSchema>;\n\nexport default function PesticideControlPage() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: applications, isLoading } = useQuery({\n    queryKey: ['/api/pesticide-applications'],\n    queryFn: async () => {\n      const response = await fetch('/api/pesticide-applications', {\n        headers: withAuth(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch applications');\n      return response.json() as Promise<PesticideApplication[]>;\n    },\n  });\n\n  const { data: fields } = useQuery({\n    queryKey: ['/api/fields'],\n    queryFn: async () => {\n      const response = await fetch('/api/fields', {\n        headers: withAuth(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch fields');\n      return response.json() as Promise<Field[]>;\n    },\n  });\n\n  const createApplicationMutation = useMutation({\n    mutationFn: async (applicationData: ApplicationFormData) => {\n      const field = fields?.find(f => f.id === applicationData.fieldId);\n      const totalVolume = field ? applicationData.volumePerHectare * field.area : applicationData.volumePerHectare;\n      \n      const response = await fetch('/api/pesticide-applications', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...withAuth(),\n        },\n        body: JSON.stringify({\n          ...applicationData,\n          totalVolume,\n          status: applicationData.scheduledFor ? 'scheduled' : 'recommended',\n          recommendedBy: 'manual',\n          confidence: 95,\n        }),\n      });\n      if (!response.ok) throw new Error('Failed to create application');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pesticide-applications'] });\n      setIsAddDialogOpen(false);\n      reset();\n      toast({\n        title: \"Application created successfully\",\n        description: \"The pesticide application has been added to your schedule.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to create application\",\n        description: error.message,\n      });\n    },\n  });\n\n  const updateApplicationMutation = useMutation({\n    mutationFn: async ({ id, ...data }: { id: string } & Partial<PesticideApplication>) => {\n      const response = await fetch(`/api/pesticide-applications/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          ...withAuth(),\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update application');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pesticide-applications'] });\n      toast({\n        title: \"Application updated\",\n        description: \"The application status has been updated.\",\n      });\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    setValue,\n    watch,\n  } = useForm<ApplicationFormData>({\n    resolver: zodResolver(applicationSchema),\n  });\n\n  const watchedFieldId = watch(\"fieldId\");\n  const watchedVolume = watch(\"volumePerHectare\");\n\n  const onSubmit = (data: ApplicationFormData) => {\n    createApplicationMutation.mutate(data);\n  };\n\n  const handleStatusChange = (application: PesticideApplication, newStatus: string) => {\n    const updateData: Partial<PesticideApplication> = { status: newStatus };\n    \n    if (newStatus === 'applied') {\n      updateData.appliedAt = new Date().toISOString();\n    }\n    \n    updateApplicationMutation.mutate({ id: application.id, ...updateData });\n  };\n\n  // Filter applications based on selected status\n  const filteredApplications = applications?.filter(app => {\n    if (selectedStatus === 'all') return true;\n    return app.status === selectedStatus;\n  }) || [];\n\n  // Calculate statistics\n  const stats = {\n    total: applications?.length || 0,\n    pending: applications?.filter(a => a.status === 'recommended' || a.status === 'scheduled').length || 0,\n    completed: applications?.filter(a => a.status === 'applied' || a.status === 'completed').length || 0,\n    totalVolume: applications?.reduce((sum, a) => sum + a.totalVolume, 0) || 0,\n    avgConfidence: applications?.length ? \n      Math.round(applications.reduce((sum, a) => sum + a.confidence, 0) / applications.length) : 0,\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'recommended':\n        return 'bg-accent text-accent-foreground';\n      case 'scheduled':\n        return 'bg-secondary text-secondary-foreground';\n      case 'applied':\n        return 'bg-primary text-primary-foreground';\n      case 'completed':\n        return 'bg-primary text-primary-foreground';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'recommended':\n        return <AlertTriangle size={16} />;\n      case 'scheduled':\n        return <Clock size={16} />;\n      case 'applied':\n      case 'completed':\n        return <CheckCircle size={16} />;\n      default:\n        return <Activity size={16} />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n          <div className=\"h-96 bg-muted rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Pesticide Control</h1>\n          <p className=\"text-muted-foreground\">\n            Manage pesticide applications and monitor treatment effectiveness\n          </p>\n        </div>\n        \n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-application\">\n              <Plus className=\"mr-2\" size={16} />\n              Schedule Application\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Schedule Pesticide Application</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fieldId\">Field</Label>\n                <Select onValueChange={(value) => setValue(\"fieldId\", value)}>\n                  <SelectTrigger data-testid=\"select-field\">\n                    <SelectValue placeholder=\"Select field\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {fields?.map((field) => (\n                      <SelectItem key={field.id} value={field.id}>\n                        {field.name} ({field.area} ha)\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {errors.fieldId && (\n                  <p className=\"text-destructive text-sm\">{errors.fieldId.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"pesticideType\">Pesticide Type</Label>\n                <Select onValueChange={(value) => setValue(\"pesticideType\", value)}>\n                  <SelectTrigger data-testid=\"select-pesticide\">\n                    <SelectValue placeholder=\"Select pesticide\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"neem_oil\">Neem Oil Spray</SelectItem>\n                    <SelectItem value=\"organic_fungicide\">Organic Fungicide</SelectItem>\n                    <SelectItem value=\"insecticidal_soap\">Insecticidal Soap</SelectItem>\n                    <SelectItem value=\"copper_sulfate\">Copper Sulfate</SelectItem>\n                    <SelectItem value=\"bacillus_thuringiensis\">Bacillus Thuringiensis</SelectItem>\n                  </SelectContent>\n                </Select>\n                {errors.pesticideType && (\n                  <p className=\"text-destructive text-sm\">{errors.pesticideType.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"volumePerHectare\">Volume per Hectare (L)</Label>\n                <Input\n                  id=\"volumePerHectare\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"e.g., 2.5\"\n                  {...register(\"volumePerHectare\")}\n                  data-testid=\"input-volume\"\n                />\n                {errors.volumePerHectare && (\n                  <p className=\"text-destructive text-sm\">{errors.volumePerHectare.message}</p>\n                )}\n                {watchedFieldId && watchedVolume && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Total volume needed: {(parseFloat(String(watchedVolume || 0)) * (fields?.find(f => f.id === watchedFieldId)?.area || 0)).toFixed(1)}L\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"applicationMethod\">Application Method</Label>\n                <Select onValueChange={(value) => setValue(\"applicationMethod\", value)}>\n                  <SelectTrigger data-testid=\"select-method\">\n                    <SelectValue placeholder=\"Select method\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"drone\">Drone Application</SelectItem>\n                    <SelectItem value=\"ground_sprayer\">Ground Sprayer</SelectItem>\n                    <SelectItem value=\"manual\">Manual Application</SelectItem>\n                  </SelectContent>\n                </Select>\n                {errors.applicationMethod && (\n                  <p className=\"text-destructive text-sm\">{errors.applicationMethod.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"scheduledFor\">Schedule For (Optional)</Label>\n                <Input\n                  id=\"scheduledFor\"\n                  type=\"datetime-local\"\n                  {...register(\"scheduledFor\")}\n                  data-testid=\"input-schedule\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Notes (Optional)</Label>\n                <Textarea\n                  id=\"notes\"\n                  placeholder=\"Additional notes or instructions...\"\n                  {...register(\"notes\")}\n                  data-testid=\"textarea-notes\"\n                />\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setIsAddDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1\"\n                  disabled={createApplicationMutation.isPending}\n                  data-testid=\"button-save-application\"\n                >\n                  {createApplicationMutation.isPending ? \"Creating...\" : \"Create Application\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Sprout className=\"text-primary\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-total-applications\">\n                  {stats.total}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Total Applications</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <Clock className=\"text-accent\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-accent\" data-testid=\"stat-pending\">\n                  {stats.pending}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Pending</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <Droplets className=\"text-secondary\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-total-volume\">\n                  {stats.totalVolume.toFixed(1)}L\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Total Volume Used</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Award className=\"text-primary\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-avg-confidence\">\n                  {stats.avgConfidence}%\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Avg Confidence</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Applications Management */}\n      <Tabs defaultValue=\"applications\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"applications\">Applications</TabsTrigger>\n          <TabsTrigger value=\"recommendations\">AI Recommendations</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"applications\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Application Management</h3>\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Applications</SelectItem>\n                <SelectItem value=\"recommended\">Recommended</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"applied\">Applied</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"grid gap-4\">\n            {filteredApplications.map((application) => {\n              const field = fields?.find(f => f.id === application.fieldId);\n              return (\n                <Card key={application.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-4 flex-1\">\n                        <div className=\"flex-shrink-0 mt-1\">\n                          {getStatusIcon(application.status)}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <h4 className=\"font-medium\">{field?.name || 'Unknown Field'}</h4>\n                            <Badge className={getStatusColor(application.status)}>\n                              {application.status.charAt(0).toUpperCase() + application.status.slice(1)}\n                            </Badge>\n                            <Badge variant=\"outline\">\n                              {application.confidence}% confidence\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-3\">\n                            <div>\n                              <span className=\"text-muted-foreground\">Pesticide</span>\n                              <p className=\"font-medium capitalize\">{application.pesticideType.replace('_', ' ')}</p>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">Volume</span>\n                              <p className=\"font-medium\">{application.totalVolume.toFixed(1)}L</p>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">Method</span>\n                              <p className=\"font-medium capitalize\">{application.applicationMethod.replace('_', ' ')}</p>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">Created</span>\n                              <p className=\"font-medium\">\n                                {new Date(application.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                          \n                          {application.scheduledFor && (\n                            <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n                              <Calendar size={14} className=\"mr-1\" />\n                              <span>\n                                Scheduled for: {new Date(application.scheduledFor).toLocaleString()}\n                              </span>\n                            </div>\n                          )}\n                          \n                          {application.appliedAt && (\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <CheckCircle size={14} className=\"mr-1\" />\n                              <span>\n                                Applied on: {new Date(application.appliedAt).toLocaleString()}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        {application.status === 'recommended' && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleStatusChange(application, 'scheduled')}\n                            disabled={updateApplicationMutation.isPending}\n                            data-testid={`button-schedule-${application.id}`}\n                          >\n                            Schedule\n                          </Button>\n                        )}\n                        \n                        {application.status === 'scheduled' && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleStatusChange(application, 'applied')}\n                            disabled={updateApplicationMutation.isPending}\n                            data-testid={`button-apply-${application.id}`}\n                          >\n                            Mark Applied\n                          </Button>\n                        )}\n                        \n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-${application.id}`}>\n                          Edit\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {filteredApplications.length === 0 && (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Sprout className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n                <h3 className=\"text-lg font-medium mb-2\">No applications found</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {selectedStatus === 'all' \n                    ? \"No pesticide applications have been created yet.\" \n                    : `No applications with status \"${selectedStatus}\" found.`}\n                </p>\n                <Button onClick={() => setIsAddDialogOpen(true)} data-testid=\"button-create-first-application\">\n                  <Plus className=\"mr-2\" size={16} />\n                  Create Your First Application\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"recommendations\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Target size={20} />\n                <span>AI-Powered Recommendations</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Sample AI recommendations */}\n                <div className=\"p-4 bg-accent/10 border border-accent/30 rounded-lg\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                        <AlertTriangle className=\"text-accent-foreground\" size={16} />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium\">Medium Priority Treatment</h4>\n                        <p className=\"text-sm text-muted-foreground\">North Field Zone A-3</p>\n                      </div>\n                    </div>\n                    <Badge className=\"bg-accent text-accent-foreground\">85% Confidence</Badge>\n                  </div>\n                  \n                  <div className=\"space-y-2 text-sm mb-4\">\n                    <p><strong>Issue:</strong> Aphid infestation detected (15% coverage)</p>\n                    <p><strong>Recommended:</strong> Neem oil spray - 2.5L per hectare</p>\n                    <p><strong>Optimal timing:</strong> Early morning application (6-8 AM)</p>\n                    <p><strong>Expected effectiveness:</strong> 92% reduction in 48 hours</p>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Generated 15 minutes ago\n                    </div>\n                    <div className=\"space-x-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        Modify\n                      </Button>\n                      <Button size=\"sm\" data-testid=\"button-accept-recommendation\">\n                        Accept & Schedule\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-primary/10 border border-primary/30 rounded-lg\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                        <CheckCircle className=\"text-primary-foreground\" size={16} />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium\">Preventive Treatment</h4>\n                        <p className=\"text-sm text-muted-foreground\">South Field Zone B-1</p>\n                      </div>\n                    </div>\n                    <Badge className=\"bg-primary text-primary-foreground\">92% Confidence</Badge>\n                  </div>\n                  \n                  <div className=\"space-y-2 text-sm mb-4\">\n                    <p><strong>Issue:</strong> Seasonal fungal prevention due</p>\n                    <p><strong>Recommended:</strong> Organic fungicide - 1.8L per hectare</p>\n                    <p><strong>Optimal timing:</strong> Evening application (6-8 PM)</p>\n                    <p><strong>Expected benefit:</strong> 78% reduction in fungal risk</p>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Generated 1 hour ago\n                    </div>\n                    <div className=\"space-x-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        Delay\n                      </Button>\n                      <Button size=\"sm\" data-testid=\"button-schedule-preventive\">\n                        Schedule for Tomorrow\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <BarChart3 size={20} />\n                  <span>Usage Analytics</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Pesticide Efficiency</span>\n                      <span className=\"font-medium\">94%</span>\n                    </div>\n                    <Progress value={94} className=\"h-2\" />\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Cost Reduction</span>\n                      <span className=\"font-medium\">76%</span>\n                    </div>\n                    <Progress value={76} className=\"h-2\" />\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Application Accuracy</span>\n                      <span className=\"font-medium\">89%</span>\n                    </div>\n                    <Progress value={89} className=\"h-2\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <TrendingUp size={20} />\n                  <span>Effectiveness Trends</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-center p-4 bg-primary/10 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-primary mb-1\">247L</div>\n                    <div className=\"text-sm text-muted-foreground\">Pesticide Saved This Month</div>\n                  </div>\n                  \n                  <div className=\"text-center p-4 bg-secondary/10 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-secondary mb-1\">₹12,450</div>\n                    <div className=\"text-sm text-muted-foreground\">Cost Savings This Month</div>\n                  </div>\n                  \n                  <div className=\"text-center p-4 bg-accent/10 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-accent mb-1\">98.5%</div>\n                    <div className=\"text-sm text-muted-foreground\">Treatment Success Rate</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":31099},"client/src/pages/plant-health.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { withAuth } from \"@/lib/auth\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\n\nimport { \n  Heart, \n  AlertTriangle, \n  CheckCircle, \n  Activity, \n  TrendingUp, \n  TrendingDown,\n  Thermometer,\n  Droplets,\n  Zap,\n  Calendar,\n  MapPin\n} from \"lucide-react\";\n\ninterface PlantHealthRecord {\n  id: string;\n  fieldId: string;\n  droneId?: string;\n  healthScore: number;\n  infectionRate: number;\n  infectionType?: string;\n  severity: string;\n  latitude?: number;\n  longitude?: number;\n  detectionConfidence: number;\n  recordedAt: string;\n}\n\ninterface Field {\n  id: string;\n  name: string;\n  latitude: number;\n  longitude: number;\n  area: number;\n}\n\nexport default function PlantHealthPage() {\n  const [selectedField, setSelectedField] = useState<string>(\"\");\n  const [timeRange, setTimeRange] = useState<string>(\"7d\");\n  const [severityFilter, setSeverityFilter] = useState<string>(\"all\");\n\n  const { data: healthRecords, isLoading } = useQuery({\n    queryKey: ['/api/health-records'],\n    queryFn: async () => {\n      const response = await fetch('/api/health-records', {\n        headers: withAuth(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch health records');\n      return response.json() as Promise<PlantHealthRecord[]>;\n    },\n  });\n\n  const { data: fields } = useQuery({\n    queryKey: ['/api/fields'],\n    queryFn: async () => {\n      const response = await fetch('/api/fields', {\n        headers: withAuth(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch fields');\n      return response.json() as Promise<Field[]>;\n    },\n  });\n\n  // Filter and process health records\n  const filteredRecords = healthRecords?.filter(record => {\n    const matchesField = !selectedField || record.fieldId === selectedField;\n    const matchesSeverity = severityFilter === 'all' || record.severity === severityFilter;\n    \n    // Time range filter\n    const recordDate = new Date(record.recordedAt);\n    const now = new Date();\n    const daysAgo = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90;\n    const cutoffDate = new Date(now.getTime() - daysAgo * 24 * 60 * 60 * 1000);\n    const matchesTime = recordDate >= cutoffDate;\n    \n    return matchesField && matchesSeverity && matchesTime;\n  }) || [];\n\n  // Calculate statistics\n  const stats = {\n    totalRecords: filteredRecords.length,\n    averageHealth: filteredRecords.length > 0 \n      ? Math.round(filteredRecords.reduce((sum, r) => sum + r.healthScore, 0) / filteredRecords.length) \n      : 0,\n    averageInfection: filteredRecords.length > 0 \n      ? Math.round((filteredRecords.reduce((sum, r) => sum + r.infectionRate, 0) / filteredRecords.length) * 10) / 10 \n      : 0,\n    highRisk: filteredRecords.filter(r => r.severity === 'high').length,\n    mediumRisk: filteredRecords.filter(r => r.severity === 'medium').length,\n    lowRisk: filteredRecords.filter(r => r.severity === 'low').length,\n    averageConfidence: filteredRecords.length > 0 \n      ? Math.round(filteredRecords.reduce((sum, r) => sum + r.detectionConfidence, 0) / filteredRecords.length) \n      : 0,\n  };\n\n  // Group records by infection type\n  const infectionTypes = filteredRecords.reduce((acc, record) => {\n    if (record.infectionType) {\n      acc[record.infectionType] = (acc[record.infectionType] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>);\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'high':\n        return 'text-destructive bg-destructive/10 border-destructive/20';\n      case 'medium':\n        return 'text-accent bg-accent/10 border-accent/20';\n      case 'low':\n        return 'text-primary bg-primary/10 border-primary/20';\n      default:\n        return 'text-muted-foreground bg-muted/10 border-border';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'high':\n        return <AlertTriangle className=\"text-destructive\" size={16} />;\n      case 'medium':\n        return <Activity className=\"text-accent\" size={16} />;\n      case 'low':\n        return <CheckCircle className=\"text-primary\" size={16} />;\n      default:\n        return <Heart className=\"text-muted-foreground\" size={16} />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n          <div className=\"h-96 bg-muted rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Plant Health Monitoring</h1>\n          <p className=\"text-muted-foreground\">\n            Real-time plant health analysis powered by AI detection algorithms\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <Select value={selectedField} onValueChange={setSelectedField}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-field-filter\">\n              <SelectValue placeholder=\"All fields\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All Fields</SelectItem>\n              {fields?.map((field) => (\n                <SelectItem key={field.id} value={field.id}>\n                  {field.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-32\" data-testid=\"select-time-range\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7d\">Last 7 days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 days</SelectItem>\n              <SelectItem value=\"90d\">Last 3 months</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Health Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Heart className=\"text-primary\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-avg-health\">\n                  {stats.averageHealth}%\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Average Health</p>\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <Progress value={stats.averageHealth} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <AlertTriangle className=\"text-accent\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-accent\" data-testid=\"stat-infection-rate\">\n                  {stats.averageInfection}%\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Infection Rate</p>\n              </div>\n            </div>\n            <div className=\"flex items-center mt-4 text-sm\">\n              {stats.averageInfection <= 5 ? (\n                <>\n                  <TrendingDown className=\"text-primary mr-1\" size={12} />\n                  <span className=\"text-primary\">Decreasing</span>\n                </>\n              ) : (\n                <>\n                  <TrendingUp className=\"text-destructive mr-1\" size={12} />\n                  <span className=\"text-destructive\">Increasing</span>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                <Activity className=\"text-destructive\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-high-risk\">\n                  {stats.highRisk}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">High Risk Areas</p>\n              </div>\n            </div>\n            <div className=\"flex items-center mt-4 text-sm\">\n              <span className=\"text-muted-foreground\">\n                {stats.mediumRisk} medium, {stats.lowRisk} low risk\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <Zap className=\"text-secondary\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-confidence\">\n                  {stats.averageConfidence}%\n                </p>\n                <p className=\"text-sm text-muted-foreground\">AI Confidence</p>\n              </div>\n            </div>\n            <div className=\"flex items-center mt-4 text-sm\">\n              <CheckCircle className=\"text-primary mr-1\" size={12} />\n              <span className=\"text-primary\">High Accuracy</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Analysis */}\n      <Tabs defaultValue=\"records\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"records\">Health Records</TabsTrigger>\n          <TabsTrigger value=\"infections\">Infection Analysis</TabsTrigger>\n          <TabsTrigger value=\"trends\">Trends</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"records\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Recent Health Records</h3>\n            <Select value={severityFilter} onValueChange={setSeverityFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-severity-filter\">\n                <SelectValue placeholder=\"All severities\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Severities</SelectItem>\n                <SelectItem value=\"high\">High Risk</SelectItem>\n                <SelectItem value=\"medium\">Medium Risk</SelectItem>\n                <SelectItem value=\"low\">Low Risk</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"grid gap-4\">\n            {filteredRecords.slice(0, 10).map((record) => {\n              const field = fields?.find(f => f.id === record.fieldId);\n              return (\n                <Card key={record.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"flex-shrink-0\">\n                          {getSeverityIcon(record.severity)}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <h4 className=\"font-medium\">{field?.name || 'Unknown Field'}</h4>\n                            <Badge className={getSeverityColor(record.severity)}>\n                              {record.severity.charAt(0).toUpperCase() + record.severity.slice(1)} Risk\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                            <div>\n                              <span className=\"text-muted-foreground\">Health Score</span>\n                              <p className=\"font-medium text-primary\">{record.healthScore}%</p>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">Infection Rate</span>\n                              <p className=\"font-medium\">{record.infectionRate}%</p>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">Confidence</span>\n                              <p className=\"font-medium\">{record.detectionConfidence}%</p>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">Detection Time</span>\n                              <p className=\"font-medium\">\n                                {new Date(record.recordedAt).toLocaleString()}\n                              </p>\n                            </div>\n                          </div>\n                          \n                          {record.infectionType && (\n                            <div className=\"mt-2\">\n                              <span className=\"text-sm text-muted-foreground\">Infection Type: </span>\n                              <span className=\"text-sm font-medium capitalize\">{record.infectionType}</span>\n                            </div>\n                          )}\n                          \n                          {record.latitude && record.longitude && (\n                            <div className=\"flex items-center mt-2 text-sm text-muted-foreground\">\n                              <MapPin size={14} className=\"mr-1\" />\n                              <span>\n                                {record.latitude.toFixed(4)}, {record.longitude.toFixed(4)}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${record.id}`}>\n                          View Details\n                        </Button>\n                        {record.severity === 'high' && (\n                          <Button size=\"sm\" data-testid={`button-treat-${record.id}`}>\n                            Recommend Treatment\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {filteredRecords.length === 0 && (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Heart className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n                <h3 className=\"text-lg font-medium mb-2\">No health records found</h3>\n                <p className=\"text-muted-foreground\">\n                  No health records match your current filters. Try adjusting the time range or field selection.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"infections\" className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Infection Type Analysis</h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Infection Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {Object.entries(infectionTypes).map(([type, count]) => (\n                    <div key={type} className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm font-medium capitalize\">{type}</span>\n                        <span className=\"text-sm text-muted-foreground\">{count} cases</span>\n                      </div>\n                      <Progress \n                        value={(count / Math.max(...Object.values(infectionTypes))) * 100} \n                        className=\"h-2\"\n                      />\n                    </div>\n                  ))}\n                  \n                  {Object.keys(infectionTypes).length === 0 && (\n                    <p className=\"text-sm text-muted-foreground text-center py-8\">\n                      No infection data available for the selected period.\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Risk Level Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium flex items-center\">\n                        <div className=\"w-3 h-3 bg-destructive rounded-full mr-2\"></div>\n                        High Risk\n                      </span>\n                      <span className=\"text-sm text-muted-foreground\">{stats.highRisk}</span>\n                    </div>\n                    <Progress value={stats.totalRecords ? (stats.highRisk / stats.totalRecords) * 100 : 0} className=\"h-2\" />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium flex items-center\">\n                        <div className=\"w-3 h-3 bg-accent rounded-full mr-2\"></div>\n                        Medium Risk\n                      </span>\n                      <span className=\"text-sm text-muted-foreground\">{stats.mediumRisk}</span>\n                    </div>\n                    <Progress value={stats.totalRecords ? (stats.mediumRisk / stats.totalRecords) * 100 : 0} className=\"h-2\" />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium flex items-center\">\n                        <div className=\"w-3 h-3 bg-primary rounded-full mr-2\"></div>\n                        Low Risk\n                      </span>\n                      <span className=\"text-sm text-muted-foreground\">{stats.lowRisk}</span>\n                    </div>\n                    <Progress value={stats.totalRecords ? (stats.lowRisk / stats.totalRecords) * 100 : 0} className=\"h-2\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"trends\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Health Trends Analysis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <TrendingUp className=\"text-primary\" size={24} />\n                  </div>\n                  <h4 className=\"font-medium mb-2\">Overall Health Trend</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Plant health has improved by 12% over the selected period\n                  </p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <Thermometer className=\"text-accent\" size={24} />\n                  </div>\n                  <h4 className=\"font-medium mb-2\">Environmental Impact</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Weather conditions have been favorable for plant growth\n                  </p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <Droplets className=\"text-secondary\" size={24} />\n                  </div>\n                  <h4 className=\"font-medium mb-2\">Treatment Effectiveness</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Applied treatments show 89% success rate in affected areas\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":21631},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Leaf, Eye, EyeOff } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst signupSchema = z.object({\n  fullName: z.string().min(2, \"Full name must be at least 2 characters\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\n\nexport default function SignupPage() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { signup, isSignupPending } = useAuth();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n  });\n\n  const onSubmit = async (data: SignupFormData) => {\n    const { confirmPassword, ...signupData } = data;\n    signup(signupData, {\n      onSuccess: () => {\n        setLocation(\"/dashboard\");\n      },\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo */}\n        <div className=\"flex items-center justify-center mb-8\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <Leaf className=\"text-primary-foreground\" size={24} />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold\">AgriSmart</h1>\n              <p className=\"text-sm text-muted-foreground\">Precision Agriculture</p>\n            </div>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center text-2xl\">Create Account</CardTitle>\n            <p className=\"text-center text-muted-foreground\">\n              Join AgriSmart and start farming smart\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\">Full Name</Label>\n                <Input\n                  id=\"fullName\"\n                  type=\"text\"\n                  placeholder=\"Enter your full name\"\n                  {...register(\"fullName\")}\n                  data-testid=\"input-fullname\"\n                />\n                {errors.fullName && (\n                  <p className=\"text-destructive text-sm\" data-testid=\"error-fullname\">\n                    {errors.fullName.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Choose a username\"\n                  {...register(\"username\")}\n                  data-testid=\"input-username\"\n                />\n                {errors.username && (\n                  <p className=\"text-destructive text-sm\" data-testid=\"error-username\">\n                    {errors.username.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  {...register(\"email\")}\n                  data-testid=\"input-email\"\n                />\n                {errors.email && (\n                  <p className=\"text-destructive text-sm\" data-testid=\"error-email\">\n                    {errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Create a password\"\n                    {...register(\"password\")}\n                    data-testid=\"input-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                  </Button>\n                </div>\n                {errors.password && (\n                  <p className=\"text-destructive text-sm\" data-testid=\"error-password\">\n                    {errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    placeholder=\"Confirm your password\"\n                    {...register(\"confirmPassword\")}\n                    data-testid=\"input-confirm-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    data-testid=\"button-toggle-confirm-password\"\n                  >\n                    {showConfirmPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                  </Button>\n                </div>\n                {errors.confirmPassword && (\n                  <p className=\"text-destructive text-sm\" data-testid=\"error-confirm-password\">\n                    {errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isSignupPending}\n                data-testid=\"button-signup\"\n              >\n                {isSignupPending ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">\n                Already have an account?{\" \"}\n                <Link\n                  href=\"/login\"\n                  className=\"text-primary hover:underline\"\n                  data-testid=\"link-login\"\n                >\n                  Sign in\n                </Link>\n              </p>\n              \n              <Link\n                href=\"/\"\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"link-home\"\n              >\n                ← Back to Home\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7908},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar-layout.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  Leaf, \n  BarChart3, \n  Wheat, \n  Wifi, \n  Map, \n  Heart, \n  Sprout,\n  Mail,\n  LogOut,\n  Menu,\n  X\n} from \"lucide-react\";\n\ninterface SidebarLayoutProps {\n  children: React.ReactNode;\n}\n\ninterface NavItem {\n  href: string;\n  label: string;\n  icon: React.ComponentType<{ className?: string }>;\n}\n\nconst navItems: NavItem[] = [\n  { href: \"/dashboard\", label: \"Dashboard\", icon: BarChart3 },\n  { href: \"/crop-selection\", label: \"Crop Selection\", icon: Wheat },\n  { href: \"/drone-connection\", label: \"Drone Connection\", icon: Wifi },\n  { href: \"/field-map\", label: \"Field Map\", icon: Map },\n  { href: \"/plant-health\", label: \"Plant Health\", icon: Heart },\n  { href: \"/pesticide-control\", label: \"Pesticide Control\", icon: Sprout },\n];\n\nexport function SidebarLayout({ children }: SidebarLayoutProps) {\n  const [location] = useLocation();\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { user, logout } = useAuth();\n\n  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      {/* Mobile overlay */}\n      {isSidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n          onClick={() => setIsSidebarOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <aside \n        className={cn(\n          \"w-64 bg-sidebar border-r border-sidebar-border flex-shrink-0 z-50 lg:relative lg:translate-x-0 transition-transform duration-200\",\n          \"fixed inset-y-0 left-0\",\n          isSidebarOpen ? \"translate-x-0\" : \"-translate-x-full lg:translate-x-0\",\n          \"lg:block\"\n        )}\n      >\n        <div className=\"p-6\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Leaf className=\"text-primary-foreground\" size={20} />\n              </div>\n              <div>\n                <h1 className=\"text-lg font-bold text-sidebar-foreground\">AgriSmart</h1>\n                <p className=\"text-xs text-muted-foreground\">Precision Agriculture</p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"lg:hidden\"\n              onClick={toggleSidebar}\n              data-testid=\"button-close-sidebar\"\n            >\n              <X size={16} />\n            </Button>\n          </div>\n          \n          {/* Navigation */}\n          <nav className=\"space-y-2\">\n            {navItems.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className={cn(\n                    \"flex items-center space-x-3 px-3 py-2 rounded-md transition-colors\",\n                    isActive\n                      ? \"bg-sidebar-primary text-sidebar-primary-foreground\"\n                      : \"text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\"\n                  )}\n                  data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <item.icon className=\"w-5 h-5\" />\n                  <span>{item.label}</span>\n                </Link>\n              );\n            })}\n          </nav>\n          \n          {/* Bottom section */}\n          <div className=\"mt-8 pt-6 border-t border-sidebar-border\">\n            <Link\n              href=\"/contact\"\n              className=\"flex items-center space-x-3 px-3 py-2 rounded-md text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground transition-colors\"\n              data-testid=\"nav-contact\"\n            >\n              <Mail size={20} />\n              <span>Contact Support</span>\n            </Link>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start space-x-3 px-3 py-2 mt-2 text-sidebar-foreground hover:bg-destructive hover:text-destructive-foreground transition-colors\"\n              onClick={logout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut size={20} />\n              <span>Logout</span>\n            </Button>\n          </div>\n        </div>\n      </aside>\n\n      {/* Main content */}\n      <main className=\"flex-1 overflow-auto\">\n        {/* Top header */}\n        <header className=\"bg-card border-b border-border p-4 lg:p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"lg:hidden\"\n                onClick={toggleSidebar}\n                data-testid=\"button-open-sidebar\"\n              >\n                <Menu size={20} />\n              </Button>\n              <div>\n                <h2 className=\"text-xl font-semibold text-card-foreground\">\n                  {navItems.find(item => item.href === location)?.label || \"AgriSmart\"}\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  {new Date().toLocaleDateString('en-US', { \n                    weekday: 'long', \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  })}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"hidden md:flex items-center space-x-2 bg-muted px-3 py-2 rounded-lg\">\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-muted-foreground\">Online</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                  <span className=\"text-secondary-foreground text-sm font-medium\">\n                    {user?.fullName?.charAt(0) || 'U'}\n                  </span>\n                </div>\n                <div className=\"hidden md:block\">\n                  <p className=\"text-sm font-medium text-card-foreground\" data-testid=\"text-user-name\">\n                    {user?.fullName || 'User'}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground capitalize\">\n                    {user?.role || 'Farmer'}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Page content */}\n        <div className=\"p-4 lg:p-6\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7107},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}